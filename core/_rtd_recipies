#
#::                     S O F T W A R E    R E C I P I E S
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:: Author(s):   	SLS, KLS, NB.  Buffalo Center, IA & Avarua, Cook Islands
#:: Version 1.01
#::
#::
#::	Purpose: To define how software is added in one place.
#::		 Software may be downloaded and installed manually, or via package manager or snaps.
#::		 Configuration items are also defined here.
#::	Usage: call this file using the "source" statment in bash. Then simply invoke the relevant recipe (funclion)
#::
#::	This script is shared in the hopes that
#::	someone will find it usefull.
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#	NOTE:	This terminal program is written and documented to a very high degree. The reason for doing this is that
#		these apps are seldom changed and when they are, it is usefull to be able to understand why and how
#		things were built. Obviously, this becomes a useful learning tool as well; for all people that want to
#		learn how to write admin scripts. It is a good and necessary practice to document extensively and follow
#		patterns when building your own apps and config scripts. Failing to do so will result in a costly mess
#		for any organization after some years and people turnover.
#
#		As a general rule, we prefer using functions extensively because this makes it easier to manage the script
#		and facilitates several users working on the same scripts over time.
#
#
#	RTD admin scrips are placed in /opt/rtd/scripts. Optionally scripts may use the common
#	functions in _rtd_library and _rtd_recipies.
#	  _rtd_library   -- contain usefull admin functions for scripts, such as "how to install software" on different systems.
#	  _rtd_recipies  -- contain software installation and configuration "recipies".
#
#	Use InstallSoftwareFromRepo, check_dependencies, ensure_snap_package_managment, ensure_flatpak_package_managment
#	to install software as a general rule. These functions will make it simple to add software no matter what the underlying
#	distribution package managment is.
#
#	Only make special cases for packages that are not distributed in the distributions own repositories os as snaps or
#	flatpaks; for example if you must download from a vendors web site (like for example Google Chrome). In such a case
#	you may use the dl function. It will automatically install the package at the url provided.
#
#	Scripts may also be stand-alone if there is a reason for this.
#
#	Taxonomy of this script: we prioritize the use of functions over monolithic script writing, and proper indentation
#	to make the script more readable. Each function shall also be documented to the point of the obvious.
#	Suggested function structure per google guidelines:
#
#	function_name () {
#		# Documentation and comments...
#		...code...
#	}
#
#	We also like to log all activity, and to echo status output to the screen in a frienly way. To accomplish this,
#	the table below may be used as appropriate:
#
#				OUTPUT REDIRECTION TABLE
#
#		  || visible in terminal ||   visible in file   || existing
#	  Syntax  ||  StdOut  |  StdErr  ||  StdOut  |  StdErr  ||   file
#	==========++==========+==========++==========+==========++===========
#	    >     ||    no    |   yes    ||   yes    |    no    || overwrite
#	    >>    ||    no    |   yes    ||   yes    |    no    ||  append
#	          ||          |          ||          |          ||
#	   2>     ||   yes    |    no    ||    no    |   yes    || overwrite
#	   2>>    ||   yes    |    no    ||    no    |   yes    ||  append
#	          ||          |          ||          |          ||
#	   &>     ||    no    |    no    ||   yes    |   yes    || overwrite
#	   &>>    ||    no    |    no    ||   yes    |   yes    ||  append
#	          ||          |          ||          |          ||
#	 | tee    ||   yes    |   yes    ||   yes    |    no    || overwrite
#	 | tee -a ||   yes    |   yes    ||   yes    |    no    ||  append
#	          ||          |          ||          |          ||
#	 n.e. (*) ||   yes    |   yes    ||    no    |   yes    || overwrite
#	 n.e. (*) ||   yes    |   yes    ||    no    |   yes    ||  append
#	          ||          |          ||          |          ||
#	|& tee    ||   yes    |   yes    ||   yes    |   yes    || overwrite
#	|& tee -a ||   yes    |   yes    ||   yes    |   yes    ||  append
#
#	The best solution is to redirect at the "wrapper" layer; a.k.a. the script that loads these functions
#	and executes them. Simply use the "source" statement to pull in the "_rtd_library" and it will do the rest:
#	you can now simply name each function herein that you wish to have installed on a wide range of distributions.
#
#	Our scripts are also structured in to three major sections: "settings", "functions", and "execute".
#	Settings, contain configurable options for the script. Functions, contain all functions. Execute,
#	contains all the actual logic and flow control of the script.
#
#
#
# 	*		--- Installing software from the snap repository is prefferred --- 		*
#
# Snap is a software deployment and package management system developed by Canonical for the Linux operating system.
# The packages, called snaps, and the tool for using them, snapd, work across a range of Linux distributions
# allowing distribution-agnostic upstream software packaging. Snap application packages of software are self-contained
# and work across a range of Linux distributions. This is unlike traditional Linux package management approaches,
# like APT or YUM, which require specifically adapted packages for each Linux distribution therefore adding delay between
# application development and its deployment for end-users.
#
# Supported distributions:
# Arch Linux, CentOS, Debian, Fedora, Solus, Manjaro Linux, Linux Mint, OpenEmbedded, Raspbian, OpenWrt and openSUSE.
#
# Security:
# Snaps are also contained from a security point of view and only have the access really needed on a system. The user may
# add additional access descressionally.
#
# 	*	--- Installing software from the flathub repository is a secondary preferrence ---      *
#
# Flatpak (formerly xdg-app) is a software utility for software deployment and package management for Linux. It is advertised
# as offering a sandbox environment in which users can run application software in isolation from the rest of the system.
# Applications using Flatpak need permissions to have access to Bluetooth, sound (with PulseAudio), network, files, etc.,
# permissions that are defined by the maintainer of the Flatpak and can be controlled (added or removed) by users on their
# system.
#
# Flathub, a repository (or remote source in the Flatpak terminology) that is located at flathub.org, has become the de facto
# standard for getting applications packaged with Flatpak. Packages are added to it by both the Flathub administrators and
# the developers of the programs themselves (though the admins have stated their preference for developer-submitted apps).
# Although Flathub is the de facto source for applications packaged with Flatpak, Flatpak can work independently of Flathub;
# it is possible to host a remote and access to remotes that are totally independent of Flathub.
#
#	*	---       Installing software from native distribution repositories  ----		*
#
# A Linux repository is a storage location from which your system retrieves and installs OS updates and applications.
# Each repository is a collection of software hosted on a remote server and intended to be used for installing and updating
# software packages on Linux systems. When you run commands such as “sudo apt update” or “sudo apt upgrade”, you may be pulling
# package information and package updates from a number of repositories.
#
#    ***Issues with native repositories are that distribusions may name packages differently making install difficult***
#
# For more information on package managers see: https://en.wikipedia.org/wiki/Package_manager
#
#	*	---       PREFFERRED Software install (Security + Control)           ----		*
#
#  CAPABILITY TABLE:
# +-----------------------------------------------------+-----------------------------------+-----------------------------------+----------------------+
# | Features                                            | Snap                              | Flatpak                           | AppImage             |
# +-----------------------------------------------------+-----------------------------------+-----------------------------------+----------------------+
# | Permission Controls Toggles                         | Yes                               | Yes                               | No                   |
# | Sandboxing Support                                  | Yes                               | Yes                               | Yes                  |
# | Sandboxing Mandatory                                | Yes                               | Yes                               | No                   |
# | App Portability                                     | Yes                               | Yes                               | No                   |
# | Native Theme Support                                | Yes (with caveats)                | Yes (with caveats)                | Yes (with caveats)   |
# | Support for Bundled Libraries                       | Yes                               | Yes                               | Yes                  |
# | Fully Contained Single Executable Support           | No                                | No                                | Yes                  |
# | Online App Store                                    | Yes                               | Yes                               | Yes                  |
# | Multi-version Parallel Apps Support                 | Yes                               | Yes                               | Yes                  |
# | Automatic Updates                                   | Yes                               | Yes                               | Yes(with caveats)    |
# | Support for Chrome OS (through Crostini containers) | Yes                               | Yes                               | Yes                  |
# | App Size                                            | Can vary but higher than AppImage | Can vary but higher than AppImage | Lowest               |
# | Number of Applications Available in the App Store   | Highest                           | Lowest                            | Somewhere in between |
# | Plugins for Desktop App Store Software              | Yes                               | Yes                               | No                   |
# +-----------------------------------------------------+-----------------------------------+-----------------------------------+----------------------+
#
#
#
# A new way to manage native packages on Linux PackageKit. PackageKit is a free and open-source suite of software
# applications designed to provide a consistent and high-level front end for a number of different package management systems.
# PackageKit simplifies how to manage software on several different linux distribution and may even be available on BSD flavors.
# The "dl" function uses package kit because it can istall both rpms and debs.
#
# TEMPLATE: For adding a new menu entry for a single package or bundle of software:
#
# recipe_Bundle:_descriptive_name () {
# 			# function documentaton...
# 			# Echo to terminal:
# 			write_error		: Prints an error message to terminal in RED
# 			write_host 		: Prints a message to the terminal w. a choice of color
# 			write_information 	: Prints a message to the terminal in BLUE
# 			write_status		: Prints a message to the terminal in GREEN
# 			write_warning 		: Prints a message to the terminal in YELLOW
#
# 			# Install software with distribution package manager (Agnostic)
# 			for i in package1 package2 package3 ; do
# 			     InstallSoftwareFromRepo $i
# 			done
#
# 			# Install flatpaks:
# 			ensure_flatpak_package_managment
# 			flatpak install package-name
#
# 			# Install snap packages:
# 			ensure_snap_package_managment
# 			snap install package-name
#
# 			# Check a dependency (install only if not present):
# 			check_dependencies package-name
# }






#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::: 	 ____       _   _   _                                ::::::::::::::::::::::
#:::::::::::::: 	/ ___|  ___| |_| |_(_)_ __   __ _ ___                ::::::::::::::::::::::
#:::::::::::::: 	\___ \ / _ \ __| __| | '_ \ / _` / __|               ::::::::::::::::::::::
#:::::::::::::: 	 ___) |  __/ |_| |_| | | | | (_| \__ \               ::::::::::::::::::::::
#:::::::::::::: 	|____/ \___|\__|\__|_|_| |_|\__, |___/               ::::::::::::::::::::::
#::::::::::::::                            |___/                             ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Setting govern how this list will behave.

# Set account on GIT Hub to fetch items from.
GIT_Profile=${GIT_Profile:-vonschutter}







#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::		 ____                  _ _                           ::::::::::::::::::::::
#::::::::::::::		| __ ) _   _ _ __   __| | | ___  ___                 ::::::::::::::::::::::
#::::::::::::::		|  _ \| | | | '_ \ / _` | |/ _ \/ __|                ::::::::::::::::::::::
#::::::::::::::		| |_) | |_| | | | | (_| | |  __/\__ \                ::::::::::::::::::::::
#::::::::::::::		|____/ \__,_|_| |_|\__,_|_|\___||___/                ::::::::::::::::::::::
#::::::::::::::                                                              ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Bundle are what will be displayed in the software Bundle selection menu.
# Bundle may be independent installs of several pieces of software and/or referencing
# multiple single installs (functions that install a single piece of software).


recipe_Bundle:_Safe_Internet_Browsing ()
{
			# Browsers and other internet tools with a focus on security and privacy
			Single_Install_Brave_Browser
			Single_Install_Vivaldi_Browser

			ensure_flatpak_package_managment
			flatpak install flathub org.keepassxc.KeePassXC -y --noninteractive	# App for secure encrypted password management

}



recipe_Bundle:_Virtualization_Tools ()
{
			ensure_snap_package_managment
			# Virtualizaton tools, and technologies
			Single_Install_DOS_VM_for_Classic_Games
			Single_Install_VirtualBox
			InstallSoftwareFromRepo virt-manager
			InstallSoftwareFromRepo qemu-kvm
}



recipe_Bundle:_CLOUD_Management_Tools ()
{
			ensure_snap_package_managment
			# Azure Cloud
			snap install powershell --classic				# PowerShell is an automation and configuration management platform. It consists of a cross-platform (Windows, Linux, and macOS) command-line shell and associated scripting language.
			snap install azure-cli --candidate				# A great cloud needs great tools; we're excited to introduce Azure CLI 2.0, our next generation multi-platform command line experience for Azure.
			snap install storage-explorer					# Upload, download, and manage Azure blobs, files, queues, and tables, as well as Azure Cosmos DB and Azure Data Lake Storage entities.

			# Ubuntu Cloud Tool
			snap install ubuntu-cloud-image					# Find the latest Ubuntu Images for clouds
			snap install juju --classic					# Juju extends the idea of operators beyond Kubernetes to traditional machine environments, for multi cloud and hybrid cloud application management.
			snap install ubuntu-image --classic				# ubuntu-image is a tool used for creation of various Ubuntu preinstalled images, both classic and snap-based.

			# GCP Platform
			snap install google-cloud-sdk --classic				# Command-line interface for Google Cloud Platform products and services

			# AWS Platform
			snap install aws-cli --classic					# Universal Command Line Interface for Amazon Web Services
			snap install aws-iot-greengrass					# AWS supported software that extends cloud capabilities to local devices
			snap install amazon-ssm-agent --classic				# Agent to enable remote management of your Amazon EC2 instance configuration
}





recipe_Bundle:_3D_Printing_Tools ()
{
			ensure_snap_package_managment
			# Tools for supporting and working with 3D-Printin
			snap install cura-slicer					# Ultimaker Cura is the world’s most popular 3D printing software
				snap connect cura-slicer:mount-observe
				snap connect cura-slicer:removable-media
			snap install meshlab						# The open source system for processing and editing 3D triangular meshes
			snap install prusa-slicer					# PrusaSlicer takes 3D models (STL, OBJ, AMF) and converts them into G-code instructions for FFF printers or PNG layers for mSLA 3D printers.
				snap connect prusa-slicer:removable-media
				snap connect prusa-slicer:mount-observe
			snap install blender --classic					# Blender is the free and open source 3D creation suite
			snap install freecad						# https://www.freecadweb.org/
			snap install openscad 						# OpenSCAD is a software for creating solid 3D CAD objects. It focuses on CAD aspects rather than artistic ones
}




recipe_Bundle:_Office_Tools ()
{
			ensure_snap_package_managment
			snap install onlyoffice-desktopeditors 				# Excellent simple to use and streamlines office bundle
			snap install libreoffice					# The latest most advanced office suit for linux
			snap install mailspring						# A modern email client
			snap install zenkit						# Zenkit is a platform for collaboration and project management for task management, ERP, CRM
			snap install joplin-desktop					# Excellent not-taking and note organization app
			snap install simplenote						# Best simple note app for sharing and collaboration on notes

			ensure_flatpak_package_managment
			flatpak install flathub org.keepassxc.KeePassXC -y --noninteractive	# App for secure encrypted password management
}



recipe_Bundle:_Media_Streaming (){
			write_status "--- Installing Music Players and Audio Software..."

			# Install Steaming apps from the Snap store:
			ensure_snap_package_managment
			snap install spotify						# The worlds most popular music streamer
			snap install google-play-music-desktop-player			# Googel music player for desktop
			snap install winds						# Great News Reader
			snap install red-app						# Red is a neat, simple yet feature rich, privacy focused YouTube Player and Downloader

			# Install Streaming apps from Flat Hub:
			ensure_flatpak_package_managment
			flatpak install flathub com.stremio.Stremio -y --noninteractive			# Watch videos, movies, TV series and TV channels instantly.
			flatpak install flathub com.github.needleandthread.vocal -y --noninteractive	# Simle and easy to use pod cast player
}



recipe_Bundle:_Audio_Editing (){
			write_status "--- Installing Audio Tools Bundle..."
			ensure_snap_package_managment
			snap install picard						# Music tag editor
			snap install audacity						# Audio editor
			snap install musescore						# Create, play and print beautiful sheet music
				snap connect musescore:cups-control
				snap connect musescore:network-manager
				snap connect musescore:alsa
				snap connect musescore:removable-media
			snap install transitionsdj					# App for mixing music, great for live DJing and mixtape production

}


recipe_Bundle:_Video_Editing_and_Streaming () {
			ensure_snap_package_managment
			snap install vidcutter 						# Install a simple video cutter
			snap install handbrake-jz					# Install handbrake DVD/BlueRay ripper video converter
			snap install matroska-tools					# Video analysis tools
			snap install kdenlive						# Popular video editor
			snap install shotcut --classic					# Simle video crop/cut
			snap install obs-studio						# Desktop Recording and Streaming
				snap connect obs-studio:alsa
				snap connect obs-studio:audio-record
				snap connect obs-studio:avahi-control
				snap connect obs-studio:camera
				snap connect obs-studio:jack1
				snap connect obs-studio:kernel-module-observe
				snap connect obs-studio:avahi-control
				snap connect obs-studio:kernel-module-observe
					if check_dependencies v4l2loopback-dkms ; then
						if check_dependencies v4l2loopback-utils ; then
							echo "options v4l2loopback devices=1 video_nr=13 card_label='OBS Virtual Camera'    exclusive_caps=1" | sudo tee /etc/modprobe.d/v4l2loopback.conf
							echo "v4l2loopback" | sudo tee /etc/modules-load.d/v4l2loopback.conf
							sudo modprobe -r v4l2loopback
							sudo modprobe v4l2loopback devices=1 video_nr=13 card_label='OBS Virtual Camera' exclusive_caps=1
						fi
					fi
				snap connect obs-studio:removable-media
				snap connect obs-studio:raw-usb
				snap connect obs-studio:joystick
				sudo snap install blender --classic

			# Add other popular video tools not in the snap repo.
			ensure_flatpak_package_managment
			flatpak install flathub org.openshot.OpenShot --noninteractive -y
			flatpak install flathub io.github.jliljebl.Flowblade --noninteractive -y

			# Download and install Light Works Proffessional Video Editor.
			if hash zypper  ; then
				dl https://cdn.lwks.com/releases/2021.1/lightworks_2021.1_r126716.rpm
			elif hash apt-get ; then
				dl https://cdn.lwks.com/releases/2021.1/lightworks_2021.1_r126716.deb
			elif hash dnf ; then
			 	dl https://cdn.lwks.com/releases/2021.1/lightworks_2021.1_r126716.rpm
			else
				write_error "Neither rpm or deb package managers found!"
			fi
}





recipe_Bundle:_Developer_Software (){
			write_status "--- Adding Developer Software Apps: IDE Tools and Compilers..."
			for i in build-essential git ; do
			     InstallSoftwareFromRepo $i
			done

			ensure_snap_package_managment
			snap install atom --classic
			snap install gitkraken --classic
			sudo snap install code --classic
			snap install slack --classic
}



recipe_Bundle:_Compression_Tools (){
			write-status "--- Adding Compression Toolset (zip, 7zip rar etc.)..."
			for i in p7zip-full p7zip-rar rar zip p7zip p7zip-gui
			do
			     check_dependencies $i
			done
}



recipe_Bundle:_Top_Curated_Games (){
			# Install games from native repositories...
			write_status "--- Adding Selection of Quality Games..."

			# --- Install games available in SNAP repository ---
			ensure_snap_package_managment
			for i in supertuxkart 0ad warzone2100 supertuxkart marsshooter mc-installer dm-tools
			do
			     snap install $i
			done

			# --- Install games available in Flathub repository and not at Snapcrafters ---
			ensure_flatpak_package_managment

			# Add requested games:
			flatpak install flathub com.moddb.TotalChaos -y	--noninteractive
			flatpak install flathub com.viewizard.AstroMenace -y --noninteractive
			flatpak install flathub io.github.EndlessSky.endless-sky -y --noninteractive
			flatpak install flathub com.albiononline.AlbionOnline -y --noninteractive
			flatpak install flathub com.endlessnetwork.aqueducts -y --noninteractive
			flatpak install flathub de.billardgl.Billardgl -y --noninteractive
			flatpak install flathub org.naev.Naev -y --noninteractive

			# --- Install games available in repository only ---
			for i in dreamchess armagetronad mesa-utils assaultcube openarena
			do
			     InstallSoftwareFromRepo $i
			done
			# Install Valves Steam Client for gaming.
			InstallSoftwareFromRepo steam
			if [ $? != 0 ]; then
				if hash rpm &>/dev/null; then
					dl https://steamcdn-a.akamaihd.net/client/installer/steam.rpm
				elif hash apt &>/dev/null; then

					dl https://steamcdn-a.akamaihd.net/client/installer/steam.deb
				else
					echo -e $RED
					echo "I am not sure how to find the Steam download for $(lsb_release -sd) "
					echo "Please try to download it manually and instrtall it from the website:"
					echo "https://store.steampowered.com/about/"
					echo -e $ENDCOLOR
				fi
			fi

			Single_Install_DOS_VM_for_Classic_Games
}





recipe_Bundle:_Admin_Tools_and_Utilities (){
			write_status "--- OEM System Administrative Tools..."
			# Loop through each item in this list of software and perform an install
			# using the relevant packaging system.
			AdminToolsAppList="terminix nmap synaptic ssh gparted sshfs htop iftop nethogs vnstat ifstat dstat nload glances bmon \
				vim vim-scripts gufw variety remmina remmina-plugin-exec remmina-plugin-secret remmina-plugin-vnc remmina-plugin-nx \
				remmina-plugin-spice remmina-plugin-xdmcp remmina-plugin-rdp remmina-plugin-telepathy diodon polari filezilla tilix dialog p7zip byobu"

			write_status "--- Adding some minor congiguration items for productivity..."
			for i in ${AdminToolsAppList}
			do
			     InstallSoftwareFromRepo $i
			done

			Single_Install_Windows_Subsystem_for_Linux			# Installs the ability to run Windows wrograms on Linux
			Single_Install_Java_Runtime					# Installs Java, needed for cross platform software like Minecraft and others
			Single_Install_Bleachbit_System_Cleaner				# Install a system cleaner (disk space saver)
			Single_Install_Remote_Desktop_by_Team_Viewer			# Teamviewer remote admin
}


recipe_Bundle:_Digital_Art_and_Imaging (){
			# some small simple apps you will like...
			ensure_snap_package_managment
			# Feature rich screenshot tool and screenshot annotation tool. Great for support.
			snap install screencloud					# Save your screenshot locally or upload it to the cloud! A link is automatically copied to your clipboard.
			snap install flameshot						# A powerful open source screenshot and annotation tool for Linux, Flameshot has a varied set of markup tools available
			snap install krita						# It is perfect for sketching and painting, and presents an end–to–end solution for creating digital painting files from scratch by masters.
			snap install gimp						# Whether you are a graphic designer, photographer, illustrator, or scientist, GIMP provides you with sophisticated tools to get your job done.
			snap install inkscape						# Inkscape is a Free and open source vector graphics editor.

}



recipe_Bundle:_OEM_restricted_fonts () {
			# Download and install Trutype font pack... these are propietary and require passphrase to unlock.
			wget "https://www.dropbox.com/s/y16d8wpb45yebv8/True_Type_Font_Pack.7z" -P /opt/rtd/cache/
			mkdir -p /usr/share/fonts/truetype/oem
			for i in p7zip-full p7zip-gui p7zip ; do
				check_dependencies $i
			done

			7z e -y /opt/rtd/cache/True_Type_Font_Pack.7z -o/usr/share/fonts/truetype/oem/
			Single_Remove_non_western_latin_fonts				# By default Ubuntu includes wierd fonts not used in the west.
}



recipe_Bundle:_Secure_Communication () {
			# This bundle includes secyre communications software. This software is end to end encrypted
			# and generally does not share keys with the vendor. Also, these apps are confined on the desktop
			# meaning that they cannot access the wich is not granted explicitly.
			ensure_snap_package_managment
			snap install signal-desktop					# Encrypted person to person chat/call/conferencing
			snap install telegram-desktop					# Encrypted chat, group commmunications
			snap install electron-mail					# Uses protonmail.com (encrypted mail)
}




recipe_Bundle:_Social_Non_Secured_Communication () {
			# This bundle includes social media communications software that is not secured
			# for privacy, but may be encrypted. This software is often useful for legacy reasons
			# or used for gaming.
			ensure_snap_package_managment
			snap install discord						# All-in-one voice and text chat for gamers that's free, secure, and works on both your desktop and phone.
			Single_Install_Skype_Messenger					# Skype keeps the world talking. Say “hello” with an instant message, voice or video call
}




recipe_Bundle:_CLOUD_Storage ()
{
			# This bundle includes software needed to access and use cloud storage.
			# The mega client is a secure way to store content online and very price
			# effective. Dropbox is widely used as well, but the company may have full access
			# to your content and Dropox must comply with US governemnt access requests. This
			# includes the 5 eyes english speaking intelligence agencies cooperation and information
			# sharing.
			Single_Install_MEGA.nz_Encrypted_Cloud_Storage			# Secure cloud storage
			Single_Install_Dropbox_Corporate_Cloud_Storage			# Common cloud storage (vandor has access to crypto keys)
			InstallSoftwareFromRepo gnome-documents				# Access to cloud storage via online accounts in the distribution.
}





recipe_Bundle:_RTD_OEM_Configuration_and_Optimizations (){
			echo "Applying OEM Configuration..."
			# This bundle includes all OEM speciffic setting and configurations for desktops.
			# This may include some basic application seen as, well, basic, and shold always be there.
			# This will also include som UI configuration and settings to improve usability,
			# and the look and feel.

			# [Task 1] Set basic locations files belonging to RTD Power Tools
			# -------------------------------------------------------------------------------------------------------#
			# Add several software items that are almost alwasys used
			# in one way or another... These may be a dependency to others as well.
			check_dependencies zip
			# Ensure modern app distribution support
			ensure_flatpak_pakage_managment
			ensure_snap_package_managment
			rtd_oem_make_launchers
			enable_firewall

			# -------------------------------------------------------------------------------------------------------#


			# [Task 2] Set basic locations files belonging to RTD Power Tools
			# -------------------------------------------------------------------------------------------------------#
			# Add launchers for some OEM apps (Internal function).
			# Assuming a given folder structure: as part of /location/of/powertools/ <hierarchy>...
			: ${_OEM_DIR:-"$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../"}
			CacheDir=${_OEM_DIR}/cache
			WallPaperDir=${_OEM_DIR}/wallpaper
			CustomSoundDir=${_OEM_DIR}/sound
			ThemeDir=${_OEM_DIR}/themes
			mkdir -p ${CacheDir}
			chmod -R 755 "${WallPaperDir}"
			chmod -R 755 "${CustomSoundDir}"

			# -------------------------------------------------------------------------------------------------------#


			# [Task 3] Configure Desktop software managers depending on desktop used
			# -------------------------------------------------------------------------------------------------------#
			case "$DESKTOP_SESSION" in
				plasma )
					write_information "$($FUNCNAME[0]): plasma on anything..".
					check_dependencies plasma-discover
					check_dependencies plasma-discover-backend-flatpak
					check_dependencies plasma-discover-backend-snap
				;;
				"/usr/share/xsessions/default" )
					# Special case for suse again...
					if cat /usr/share/xsessions/default.desktop |grep "Plasma"  ; then
						write_information "$($FUNCNAME[0]): kde on suse"
						check_dependencies plasma-discover
						check_dependencies plasma-discover-backend-flatpak
						check_dependencies plasma-discover-backend-snap
					else
						write_information "$($FUNCNAME[0]): gnome on suse"
						snap install snap-store
						check_dependencies gnome-software
						check_dependencies gnome-software-plugin-flatpak
						check_dependencies gnome-software-plugin-snap
					fi
				;;
				* )
					write_information "$($FUNCNAME[0]): case = *"
					snap install snap-store
					check_dependencies gnome-software
					check_dependencies gnome-software-plugin-flatpak
					check_dependencies gnome-software-plugin-snap
				;;
			esac
			# -------------------------------------------------------------------------------------------------------#


			# [Task 4] Configure relevant power management
			# -------------------------------------------------------------------------------------------------------#
			check_dependencies tuned
			systemctl enable --now tuned
			tuned-adm profile balanced

			rtd_oem_check_splash () {
				if -f $1 ; then
					if cat $1 |grep "-desktop" ; then
						InstallSoftwareFromRepo splash && echo 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"'>> /etc/default/grub
						update-grub
					fi
				fi
			}
			# If this system was built using the RTD process and is debian based, use instructions in said file.
			rtd_oem_check_splash /opt/rtd/log/preseed.cfg
			rtd_oem_check_splash /root/original-ks.cfg

			#Tune to virtual machine guest or tune according to hardware type::
			check_dependencies virt-what
			check_dependencies laptop-detect
			if virt-what ; then
				write_information "$($FUNCNAME[0]): This is likely not running in a virtual machine."
				if laptop-detect ; then
					write_information "$($FUNCNAME[0]): This is likely a laptop; applying pwersave profile..."
					tuned-adm profile powersave
				else
					write_information "$($FUNCNAME[0]): This is likely NOT a laptop; applying desktop profile..."
					tuned-adm profile desktop
				fi
			else
				write_information "$($FUNCNAME[0]): This is likely a VM; applying virtual-guest profile..."
				tuned-adm profile virtual-guest
			fi
			# -------------------------------------------------------------------------------------------------------#


			# [Task 5] Configure UI Tweaks
			# -------------------------------------------------------------------------------------------------------#
			# Apply tweaks to the UI based on desktop active
			if  ps -e |grep "gnome-shell"; then

				# [Task 5.1] Configure Wallpapers for OEM look and feel.
				# -------------------------------------------------------------------------------------------------------
				write_information "$($FUNCNAME[0]): Fonud the gnome UI on this system! Adding OEM customizations..."
				# Configure Gnome for OEM look and feel. This is completely as desired.
				# These setings will then be copied to the "/etsc/skel" directory where user templates
				# are stored. This will allow new users to get the same themes and settings as the
				# current user. This will not be done if the system was not built by the oem process.

				# Register Wallpapers in Gnome
				rtd_oem_register_wallpapers_for_gnome ${WallPaperDir}

				# Set the default wallpaper...
				run_command_in_gnome_user_session gsettings set org.gnome.desktop.background picture-uri file://${WallPaperDir}/Wayland.jpg
				# -------------------------------------------------------------------------------------------------------


				# [Task 5.2] Add extensions:
				# -------------------------------------------------------------------------------------------------------
				# To fully support themes and customixzations the Gnome environment requires extensions and
				# theme modules "engines" that change the look and feel of buttons and widgets. Also, additional
				# software is needed to change from one them to another.

				write_information "Adding UI themes..."
				# Special case for Fedora: Add the gnome UI tweak tool...
				if cat /etc/os-release |grep "Fedora" ; then
					# Enable the extra repositories in fedora to get access to the espected software.
					InstallSoftwareFromRepo fedora-workstation-repositories
					InstallSoftwareFromRepo gnome-tweaks
				fi
				InstallSoftwareFromRepo gnome-tweak

				write_information "--- Optimizig look and feel of the desktop for productivity and aestetics..."
				for i in gnome-shell-extensions \
					gnome-shell-extension-appindicator \
					gnome-shell-extension-suspend-button \
					gnome-shell-extension-multi-monitors \
					gnome-shell-extension-caffeine \
					gnome-shell-extension-gsconnect  \
					gnome-shell-extension-gsconnect-browsers \
					gnome-shell-extension-dash-to-panel \
					gnome-shell-extension-dash-to-dock \
					gnome-shell-extension-dashtodock
				do
					InstallSoftwareFromRepo $i
				done
				# -------------------------------------------------------------------------------------------------------


				# [Task 5.3] Add cusom themes for gnome and snap:
				# -------------------------------------------------------------------------------------------------------
				# Installing dependencies for themes. If the package name was the same there would not
				# need for this extra checking, but different distributions have different
				# names for the same software. Therefore there is a need to check based on what
				# distro package managemnt is installed. This is easier and likely accurate in most cases.
				# Pop, Ubuntu, Kubuntu, and Debian all use deb packages and name the packages consistently for ex.
				# This will ensure that the sofware is installed so the themes look good...
				if hash apt-get 2>/dev/null ; then
					for i in sassc libcanberra-gtk-module libglib2.0-dev gtk2-engines-murrine gtk2-engines-pixbuf libxml2-utils ; do
						check_dependencies  $i
					done
				elif hash zypper 2>/dev/null ; then
					for i in check_dependencies gtk-murrine-engine gtk2-engines sassc glib2-devel ; do
						check_dependencies  $i
					done
				elif hash dnf 2>/dev/null ; then
					for i in check_dependencies gtk-murrine-engine gtk2-engines sassc glib2-devel ; do
						check_dependencies  $i
					done
				elif hash pacman 2>/dev/null ; then
					for i in check_dependencies gtk-engine-murrine gtk-engines sassc; do
						check_dependencies  $i
					done
				else
					write_error "$($FUNCNAME[0]): This option requires a supported package manager on your system (deb, zypper, dnf, pacman). Neiter was found!"
				fi

				# Install theme for a smooth mocka experience in UI (snap, gnome, and icons)...
				snap install vimix-themes
					7z x ${ThemeDir}/vimix-gtk-themes.zip -o/usr/share/themes
					7z x  ${ThemeDir}/vimix-icon-themes.zip -o${ThemeDir} && pushd ${ThemeDir}/vimix-icon-theme-master && ./install.sh && popd
					for i in $(snap connections | grep gtk-common-themes:gtk-3-themes | awk '{print $2}'); do sudo snap connect $i vimix-themes:gtk-3-themes; done

				# Install theme for previous Apple users...
				snap install mojave-themes
					7z x ${ThemeDir}/Mojave-gtk-theme.zip -o${ThemeDir} && pushd ${ThemeDir}/Mojave-gtk-theme-master && ./install.sh && popd
					7z x ${ThemeDir}/McMojave-circle.zip -o${ThemeDir} && pushd ${ThemeDir}/McMojave-circle-master && ./install.sh && popd
					for i in $(snap connections | grep gtk-common-themes:gtk-3-themes | awk '{print $2}'); do sudo snap connect $i mojave-themes:gtk-3-themes ; done

				# Install Windows 10 Themes (Light and Dark) + icons
				7z x ${ThemeDir}/Windows-10-Light.zip -o/usr/share/themes
				7z x ${ThemeDir}/Windows-10-Dark.zip -o/usr/share/themes
				7z x ${ThemeDir}/Windows-10-Icons.zip -o/usr/share/icons

				# Install the Flattery icon theme...
				7z x ${ThemeDir}/Flatery-icon-theme.zip -o/usr/share/icons

				# Install basic professional Arc and gnome default themes...
				for i in numix-gtk-theme numix-icon-theme arc-theme
				do
					InstallSoftwareFromRepo $i
				done

				# Add a default Icon theme "Arc" fo a clean and crisp proffessional default look.
				7z x ${ThemeDir}/Arc-icon-theme.zip -o${ThemeDir} && mv ${ThemeDir}/Arc-icon-theme /usr/share/icons/Arc
				# -------------------------------------------------------------------------------------------------------



				# [Task 5.4] Add cusom tweaks to the behavvior of the gnome UI:
				# -------------------------------------------------------------------------------------------------------
				# These common OEM tweaks are defind in the function "set_gnome_ui_common_tweaks_for_user" in the
				# _rtd_library. The easiest is to simply use that. Naturally, any additional tweaks my be added in the
				# gtweak.sh below.
				tempfile=$( mktemp )
				chmod 777 ${tempfile}
				cat >> ${tempfile} <<-EOF
				#!/bin/bash
				source ${_OEM_DIR}/core/_rtd_library
				set_gnome_ui_win10_tweaks_for_user
				EOF

				run_command_in_gnome_user_session /bin/bash ${tempfile}
				# -------------------------------------------------------------------------------------------------------


				# [Task 5.5] copy configuration elements so that NEW users also get the tweaks:
				# -------------------------------------------------------------------------------------------------------
				# If the system that this is run on was built using an unattended build it is reasonable to
				# assume that the UI customizations should be implemented such that all new users will get
				# the OEM tweaks to the UI. If this task sequence is run on a system by a user on a system not
				# built by the unattended OEM process, then these changes sould only be implemented for the user
				# running this task.
				if [[ -f /opt/rtd/log/task.sh.log ]] ; then
					write_information "THis system was built by an OEM process: copying tweaks for all new users..."
					mkdir -p /etc/skel/.config
					cp -r /home/${SUDO_USER}/.config/dconf /etc/skel/.config/dconf
				else
					write_information "Only implementing tweaks for the current user..."
				fi
				# -------------------------------------------------------------------------------------------------------
			fi


			if  ps -e |grep "plasmashell" ; then
				check_dependencies p7zip-full
				check_dependencies zip

				write_information "$($FUNCNAME[0]): Detected KDE UI!"
				# Download and Set Wallpaper...
				CacheDir="${_RTDCACHE:="/opt/rtd/cache"}"
				sudo -H -u $SUDO_USER DISPLAY=$DISPLAY source /opt/rtd/core/_rtd_library ; rtd_oem_kde_set_wallpaper "${WallPaperDir}/Wayland.jpg"

				sudo -H -u $SUDO_USER DISPLAY=$DISPLAY lookandfeeltool -a 'org.kde.breezedark.desktop'

				mkdir -p ${CacheDir} && if [[ -e ${CacheDir}/master.zip ]] ; then rm ${CacheDir}/master.zip ; fi || write_error "Unable to create ${CacheDir}"
				wget https://github.com/vinceliuice/vimix-kde/archive/master.zip  -P /opt/rtd/cache || write_error "Unable to download https://github.com/vinceliuice/vimix-kde/archive/master.zip"
				unzip -o /opt/rtd/cache/master.zip -d /opt/rtd/cache && pushd /opt/rtd/cache/vimix-kde-master && ./install.sh && popd ; rm ${CacheDir}/master.zip

				7z x  ${ThemeDir}/vimix-icon-themes.zip -o${ThemeDir} && pushd ${ThemeDir}/vimix-icon-theme-master && ./install.sh && popd
				for i in $(snap connections | grep gtk-common-themes:gtk-3-themes | awk '{print $2}'); do sudo snap connect $i vimix-themes:gtk-3-themes; done
				sudo -H -u $SUDO_USER DISPLAY=$DISPLAY lookandfeeltool -a  'com.github.vinceliuice.Vimix-Dark-Doder'
			fi
}





#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::	 ____  _             _        ___           _        _ _      ::::::::::::::::::::::
#::::::::::::::	/ ___|(_)_ __   __ _| | ___  |_ _|_ __  ___| |_ __ _| | |___  ::::::::::::::::::::::
#::::::::::::::	\___ \| | '_ \ / _` | |/ _ \  | || '_ \/ __| __/ _` | | / __| ::::::::::::::::::::::
#::::::::::::::	 ___) | | | | | (_| | |  __/  | || | | \__ \ || (_| | | \__ \ ::::::::::::::::::::::
#::::::::::::::	|____/|_|_| |_|\__, |_|\___| |___|_| |_|___/\__\__,_|_|_|___/ ::::::::::::::::::::::
#::::::::::::::	               |___/                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::






Single_Remove_non_western_latin_fonts () {
	rtd_oem_remove_non_western_latin_fonts
}


Single_Install_Brave_Browser () {
		# This function will add the vendor maintained repository and install the software
		# using the distribution speciffic installers.
		write_information "$($FUNCNAME[0]): Installing Brave Browser directly from vendor repo..."
		if cat "/etc/os-release" | grep "debian" ; then
			check_dependencies apt-transport-https
			check_dependencies curl
			check_dependencies gnupg
			curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
			echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | tee /etc/apt/sources.list.d/brave-browser-release.list
			apt update
			InstallSoftwareFromRepo brave-browser
			return $?
		elif cat "/etc/os-release" | grep "fedora" ; then
			check_dependencies dnf-plugins-core
			dnf config-manager --add-repo https://brave-browser-rpm-release.s3.brave.com/x86_64/
			rpm --import https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
			InstallSoftwareFromRepo brave-browser
			return $?
		elif  cat "/etc/os-release" | grep "suse" ; then
			check_dependencies curl
			rpm --import https://brave-browser-rpm-release.s3.brave.com/brave-core.asc
			zypper addrepo https://brave-browser-rpm-release.s3.brave.com/x86_64/ brave-browser
			InstallSoftwareFromRepo brave-browser
			return $?
		else
			# Try for any distro using apt... SUSE has a shortcut for a simple apt, wich will mess this up if checked first...
			if hash apt-get ; then
				apt install -y apt-transport-https curl gnupg
				curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -
				echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | tee /etc/apt/sources.list.d/brave-browser-release.list
				apt update
				apt install brave-browser -y
				return $?
			else
				echo "${FUNCNAME[0]}: Neither debian, fedora, or suse base distros could be found; NOT installing brave."
				return 1
			fi
		fi
}



Single_Install_Vivaldi_Browser (){
		# # This function uses the RTD function "dl" to download a distribution speciffic package directly
		# # from the vendors website. It will work until the vendor removes the exact file...

		write_information "$($FUNCNAME[0]): Installing Brave Browser directly from vendor repo..."
		if cat "/etc/os-release" | grep "debian" ; then
			apt -y install wget gnupg2 software-properties-common
			wget -qO- https://repo.vivaldi.com/archive/linux_signing_key.pub | sudo apt-key add -
			echo 'deb https://repo.vivaldi.com/archive/deb/ stable main' | sudo tee /etc/apt/sources.list.d/vivaldi.list
			apt update
			InstallSoftwareFromRepo vivaldi-stable
			return $?
		elif cat "/etc/os-release" | grep "fedora" ; then
			InstallSoftwareFromRepo dnf-utils
			dnf config-manager --add-repo https://repo.vivaldi.com/archive/vivaldi-fedora.repo
			InstallSoftwareFromRepo vivaldi-stable
			return $?
		elif  cat "/etc/os-release" | grep "suse" ; then
			zypper --gpg-auto-import-keys addrepo --refresh https://repo.vivaldi.com/archive/vivaldi-suse.repo
			InstallSoftwareFromRepo vivaldi-stable
			return $?
		else
			echo "${FUNCNAME[0]}: Neither debian, fedora, or suse base distros could be found; NOT installing vivaldi."
			return 1
		fi
}


Single_Install_Windows_Subsystem_for_Linux (){
			write_status "$($FUNCNAME[0]): Installing Wine..."
			InstallSoftwareFromRepo wine
}


Single_Install_Simplenote (){
			write_status "$($FUNCNAME[0]): Installing simplenote..."
			# some small simple apps you will like...
			ensure_snap_package_managment
			# A simple to use not taking app that auto syncs with the same app on any device.
			snap install simplenote

}



Single_Install_DOS_VM_for_Classic_Games (){
			write_status "$($FUNCNAME[0]):  Installing DOS Environment..."
			# some small simple apps you will like...
			ensure_snap_package_managment
			# A small app that allows you to use your old DOS software.
			snap install dosbox-x

}







Single_Install_Java_Runtime (){
			# Special case for installing Oracle Java...
			write_status "$($FUNCNAME[0]): Adding Java JRE..."
			# Add the Oracle Java repository and install the software.
			# add-apt-repository ppa:linuxuprising/java -y  1>>$_LOGFILE 2>>$_ERRLOGFILE
			# apt-get update  1>>$_LOGFILE 2>>$_ERRLOGFILE
			# echo oracle-java11-installer shared/accepted-oracle-license-v1-2 select true | sudo /usr/bin/debconf-set-selections && \
			# apt install -y oracle-java12-installer    1>>$_LOGFILE 2>>$_ERRLOGFILE
			# apt install -y oracle-java12-set-default  1>>$_LOGFILE 2>>$_ERRLOGFILE
			InstallSoftwareFromRepo default-jre

}



Single_Install_Bleachbit_System_Cleaner (){
			#Bleachbit
			write_status "$($FUNCNAME[0]): Bleachbit System Cleaning Tool..."
			InstallSoftwareFromRepo bleachbit
}



Single_Install_Restricted_Codecs (){
			write_status "$($FUNCNAME[0]): Install all the required multimedia codecs..."
			for i in libdvdcss2 ffmpeg ; do
			     InstallSoftwareFromRepo $i
			done
}



Single_Install_VLC_Universal_Videao_Player (){
			#VLC Media Player
			wtite_status "$($FUNCNAME[0]): Installing VLC Media Player..."
			InstallSoftwareFromRepo vlc
}



Single_Install_Google_Chrome_Browser (){
			# Special case for installing Google Chrome
			write_status "$($FUNCNAME[0]): Installing Google Chrome Browser from google directly..."

			# Download either a deb or an rpm depending on what package format this system supports.
			if hash deb ; then
				dl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
			elif hash rpm ; then
				dl https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
			else
				write_error "$($FUNCNAME[0]): No RPM or DEB package managment service was found! ..."
			fi
}



Single_Install_Remote_Desktop_by_Team_Viewer (){
			#Teamviewer
			write_status  "$($FUNCNAME[0]): Installing Teamviewer..."

			# Download either a deb or an rpm depending on what package format this system supports.
			# Team Viewer has a special package for SUSE; thus we check if OS is suse or not as well.
			if hash deb ; then
				dl https://download.teamviewer.com/download/linux/teamviewer_amd64.deb
			elif hash rpm ; then
				if hostnamectl | grep -i suse ; then
					dl https://download.teamviewer.com/download/linux/teamviewer-suse.x86_64.rpm
				else
					dl https://download.teamviewer.com/download/linux/teamviewer.x86_64.rpm
				fi
			else
				write_error "$($FUNCNAME[0]): No RPM or DEB package managment service was found! ..."
			fi
}



Single_Install_Remote_Desktop_by_Anydesk () {
			write_status "$($FUNCNAME[0]): Installing Anydesk remote desktop... "
			ensure_flatpak_package_managment
			flatpak install flathub com.anydesk.Anydesk --noninteractive -y
}



Single_Install_Skype_Messenger (){
			#Skype for Linux
			write_status "$($FUNCNAME[0]): Installing Skype For Linux..."
			ensure_snap_package_managment
			snap install skype --classic
}



Single_Install_Viber_Messenger (){
			write_status "$($FUNCNAME[0]): Installing Viber instant messaging..."
			ensure_snap_package_managment
			snap install --edge viber-mtd
}



Single_Install_MEGA.nz_Encrypted_Cloud_Storage (){
			# Special case for installing MEGA nz file sync utility (better than Drop Box)...
			write_status "$($FUNCNAME[0]): Installing MEGA nz file crypto sync utility..."

			# Reset & clear variables in case of incomplete cleanup...
			FILE2GET=
			URL=
			fetch_mega_file ()
			{
				product=$1
				if hostnamectl | grep -i "Debian" ; then
					# Grab the debian name and version and format it like Mega does their download URL...
					URL="https://mega.nz/linux/MEGAsync/Debian_$(hostnamectl |grep -i Debian |cut -f7 -d' ').0/amd64/${product}-Debian_$(hostnamectl |grep -i Debian |cut -f7 -d' ').0_amd64.deb"
					write_information "$($FUNCNAME[0]): Downloading ${product} from: ${URL}"
				elif hostnamectl | grep -i "Ubuntu" ; then
					# Grab the Ubuntu name and version and format it like Mega does their download URL...
					URL="https://mega.nz/linux/MEGAsync/xUbuntu_$(hostnamectl |grep -i Ubuntu |cut -f6 -d' ')/amd64/${product}-xUbuntu_$(hostnamectl |grep -i Ubuntu |cut -f6 -d' ')_amd64.deb"
					write_information "$($FUNCNAME[0]): Downloading ${product} from: ${URL}"
				elif hostnamectl | grep -i "openSUSE" ; then
					# Grab the SUSE name and version and format it like Mega does their download URL...
					TGT="$(hostnamectl |grep -i suse |head -n 1|cut -f5,6,7 -d' ')" ; TGT=${TGT// /_}
					URL="https://mega.nz/linux/MEGAsync/${TGT}/x86_64/${product}-${TGT}.x86_64.rpm"
					write_information "$($FUNCNAME[0]): Downloading ${product} from: ${URL}"
				elif hostnamectl | grep -i "Fedora" ; then
					# Grab the Fedora name and version and format it like Mega does their download URL...
					TGT="$(hostnamectl |grep -i fedora |tail -n 2|cut -f5,6 -d' ')" ; TGT=${TGT// /_}
					URL="https://mega.nz/linux/MEGAsync/${TGT::-2}/x86_64/${product}-${TGT::-2}.x86_64.rpm"
					write_information "$($FUNCNAME[0]): Downloading ${product} from: ${URL}"
				else
					write_error "$($FUNCNAME[0]): I am not sure how to find the Mega sync download for $( hostnamectl |grep "Operating") "
					write_error "$($FUNCNAME[0]): Please try to download it manually and instrtall it from the website:"
					write_error "$($FUNCNAME[0]): https://mega.nz/sync"

				fi

				# If a known distributio was found and URL set, use "dl" function to install app...
				[[ -n "${URL}" ]] && dl ${URL}
			}
			fetch_mega_file megasync
			fetch_mega_file megacmd
			if is_software_package_installed nautilus ; then fetch_mega_file nautilus-megasync ; fi
			if is_software_package_installed thunar ; then fetch_mega_file thunar-megasync ; fi
			if is_software_package_installed nemo ; then fetch_mega_file nemo-megasync ; fi
			if is_software_package_installed dolphin ; then fetch_mega_file dolphin-megasync ; fi
}







Single_Install_Dropbox_Corporate_Cloud_Storage (){
			# Install Dropbox
			write_status "$($FUNCNAME[0]): Installing Dropbox Cloud Storage Sync..."
			InstallSoftwareFromRepo nautilus-dropbox

			if is_software_package_installed nautilus-dropbox ; then
				if [[ ! -d ~/Dropbox ]]; then
					mkdir Dropbox
					dd if=/dev/zero of=~/.dropbox/storage bs=1M count=14072
					mkfs.ext4 /home/${SUDO_USER}/.dropbox/storage
					chattr +i /home/${SUDO_USER}/Dropbox
					/home/${SUDO_USER}/.dropbox/storage /home/${SUDO_USER}/Dropbox ext4 defaults,user_xattr,loop 0 0
					mount /home/${SUDO_USER}/Dropbox/
					chown -R ${SUDO_USER} /home/${SUDO_USER}/Dropbox
				else
					write_information "$($FUNCNAME[0]): Dropbox folder found! Dropbox is already configured, skipping..."
					write_information "$($FUNCNAME[0]): Please use rtd-dropbox-on-ecryptfs to move dropox to a loop mounted volume if you need to use dropob in a Luks crypt home directory"
				fi
			else
				write_error "$($FUNCNAME[0]): Dropox does not seem to have been installed..."
			fi
}









Single_Install_VirtualBox (){
			# Install Virtual Box from Oracle. However avoid installing it in a VM, as tis usecase may be counterproductive.
			# NOTE:
			# VirtualBox is a powerful x86 and AMD64/Intel64 virtualization product for enterprise as well as
			# home use. Not only is VirtualBox an extremely feature rich, high performance product for enterprise
			# customers, it is also the only professional solution that is freely available as Open Source Software
			# under the terms of the GNU General Public License (GPL) version 2. See "About VirtualBox" for an introduction.
			# Presently, VirtualBox runs on Windows, Linux, Macintosh, and Solaris hosts and supports a large number
			# of guest operating systems including but not limited to Windows (NT 4.0, 2000, XP, Server 2003, Vista, Windows 7,
			# Windows 8, Windows 10), DOS/Windows 3.x, Linux (2.4, 2.6, 3.x and 4.x), Solaris and OpenSolaris, OS/2, and OpenBSD.
			# VirtualBox is being actively developed with frequent releases and has an ever growing list of features,
			# supported guest operating systems and platforms it runs on. VirtualBox is a community effort backed by a
			# dedicated company: everyone is encouraged to contribute while Oracle ensures the product always meets professional
			# quality criteria.
			#
			check_dependencies virt-what

			# Special case for installing VirtualBox since distributions name the package and install in different ways...
			if virt-what ; then
				write_warning "$($FUNCNAME[0]): This computer is likely a Virtual Macine ( $(virt-what) ) and using Virtualbox inside a VM is not reccommended."
			else
				if hash apt ; then
					write_information "--- Installing VirtualBox in Debian based system if available..."
					# Unlike RPM based systems DEB's are allowed to ask questions in the middle of an install:
					echo virtualbox virtualbox/module-compilation-allowed boolean true | /usr/bin/debconf-set-selections
					echo virtualbox virtualbox/delete-old-modules boolean true | /usr/bin/debconf-set-selections

					for i in virtualbox virtualbox-dkms virtualbox-ext-pack virtualbox-guest-additions-iso
					do
						InstallSoftwareFromRepo $i
					done

					[[ "$DESKTOP_SESSION" == "plasma" ]] || InstallSoftwareFromRepo virtualbox-qt

					# Ensure that the current user can use USB etc...
					if id -nG "$SUDO_USER" | grep -qw "vboxusers"; then
						write_information "$($FUNCNAME[0]): $SUDO_USER already belongs to vboxusers group"
					else
						usermod -G vboxusers -a $SUDO_USER
					fi
				elif hash dnf ; then
					write_information "$($FUNCNAME[0]): Installing VirtualBox in a Red Hat based system if available..."
					InstallSoftwareFromRepo VirtualBox
				elif hash zypper  ; then
					write_information "$($FUNCNAME[0]): Installing virtualbox in a SUSE based system..."
					for i in virtualbox virtualbox-dkms virtualbox-ext-pack virtualbox-guest-additions-iso
					do
						InstallSoftwareFromRepo $i
					done

					[[ "$DESKTOP_SESSION" == "plasma" ]] || InstallSoftwareFromRepo virtualbox-qt

					# Ensure that the current user can use USB etc...
					if id -nG "$SUDO_USER" | grep -qw "vboxusers"; then
						write_information "$($FUNCNAME[0]): $SUDO_USER already belongs to vboxusers group"
					else
						usermod -G vboxusers -a $SUDO_USER
					fi
				else
					write_error "$($FUNCNAME[0]): No supported packaging system detected for special case of installing Virtual Box! "
				fi
			fi
}


