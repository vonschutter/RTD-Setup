#!/bin/bash
#::				S I M P L E     S Y S T E M   S U P P O R T    T O O L
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:: Author(s):   	SLS, KLS, NB.  Buffalo Center, IA & Avarua, Cook Islands
	RTD_Version=2.0
:	${GIT_Profile:=vonschutter}
#::
#::
#::	Purpose: To simplify support tasks
#::		  - Display system information
#::		  - Update system software
#:: 		  - Bakup virtual machines
#::               - Cleanup/Report on PPA's (Ubuntu only)
#::               - Show systems physical location
#::		  - Check if a password you intend to use is for sale on the Darknet
#::
#::     Usage: run the script "bash /path/to/rtd" or if installed in the $PATH; by rtd simply type "rtd" in a terminal.
#::
#::     This script is shared in the hopes that
#::     someone will find it usefull.
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#	NOTE:	This terminal program is written to be readable and documented to a very high degree. The reason is that
#		these apps are seldom changed and when they are, it is usefull to be able to understand why and how
#		things were built. Obviously, this becomes a useful learning tool as well; for all people that want to
#		learn how to write admin scripts. It is a good and necessary practice to document extensively and follow
#		patterns when building your own apps and config scripts. Failing to do so will result in a costly mess
#		for any organization after some years and people turnover.
#
#		As a general rule, we prefer using functions extensively because this makes it easier to manage the script
#		and facilitates several users working on the same scripts over time.
#
#
#	RTD admin scrips are placed in /opt/rtd/scripts. Optionally scripts may use the common
#	functions in _rtd_functions and _rtd_recipies:
#
#	  _rtd_functions -- contain usefull admin functions for scripts, such as "how to install software" on different systems.
#	  _rtd_recipies  -- contain software installation and configuration "recipies".
#
#	Scripts may also be stand-alone if there is a reason for this. This script is written to function independently
#	so that it is easy to copy to many server systems, or just to use once on a remote system. This is accomplished by
#	including all functions and dependency checking in this script; as well as avoidnig relying on external files like
#	*.diff files. As a consequence of the portability benefit this script becomes rather large and time consuming to navigate.
#
#	Taxonomy of this script: we prioritize the use of functions over monolithic script writing, and proper indentation
#	to make the script more readable. Each function shall also be documented to the point of the obvious.
#	Suggested function structure per google guidelines:
#
#	function_descriptive_name () {
#		# Documentation and comments...
#		...code...
#	}
#
#
#	Our scripts are also structured in to three major sections: "settings", "functions", and "execute".
#	Settings, contain configurable options for the script. Functions, contain all functions. Execute,
#	contains all the actual logic and control of the script.
#
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::            Script Settings               ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# You may comment out or edit items as you deem necessary.
# Some formatting options for cli graphic display.
export BRANDING="RunTime Data : Simple Support Tool"
export BRANDING_ORG="RTD"
export DIALOG_CANCEL=1
export DIALOG_ESC=255
export HEIGHT=20
export WIDTH=90
export LIST_HEIGHT=12

# Set location to backup virtual machines to. This location must have addequate space
# to store several copies of the virtual machine disks. This may be a network share or
# an external storage or san mount point. If you do non need to backup VMs you can set
# this to blank or ignore it. If you do not have QEMU/KVM installed selecting this
# option to back up Virtual Machines in the menu will do nothing.
: "${VM_BACKUP_TARGET:-"/mnt/vmdsk/VM_BACKUP"}"

# Terminal Color Setup definitions. These settings allow the simlified use of
# text colors in the teminal. You may want to echo RED for error or GREEN for OK.
YELLOW="\033[1;33m"
RED="\033[1;31m"
ENDCOLOR="\033[0m"
GREEN="\033[1;32m"
BLUE="\033[1;34m"

# Set the background color of the tool. The appearance of the menu system may
# look different on different systems depending on their default settings.
# Here we define the bacground color for consistency by seting the NEWT_COLORS= option. If "dialog"
# is the desired front end then you may set the DIALOG_COLORS= optoin for preferred colors.
# You may select a front end to the rtd tool below by seting the RTD_GUI= option. This will
# override what is detected and preferred!
# Valid choices are: "dialog", "whiptail".
# RTD_GUI=dialog
export NEWT_COLORS='root=,gray '
export RTD_GUI="${RTD_GUI:=dialog --clear}"


# Override default values here:
# SSH_PUBLIC_KEY_FILE=
# PUT_ISO_FILE_HERE_WHEN_DONE=
# PUT_QCOW_FILE_HERE_WHEN_DONE=
# VOLUME_TITLE=


# Set location to where to log information:
# in the system log directory in a file named the same as this script.
: ${LOGDIR:-"/var/log/rtd"}
LOGFILE="${LOGDIR}/${ basename $0 }.log"

# Seting entries to conform to internal naming standard for max compatability.
_ERRLOGFILE="${LOGFILE}"
_LOGFILE="${LOGFILE}"


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::            Tool Executive Functions      ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Below please find the executive functions of this script. These are the functions
# that actually do the work requested.

check_rtd_library ()
{
	_src_url=https://github.com/${_GIT_PROFILE}/RTD-Setup/raw/main/core/_rtd_library

	if source "$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library ; then
		# Library found in relative path...
		write_information "${FUNCNAME[0]} 1 Using:  $( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library
	elif source $(find /opt -name _rtd_library |grep -v bakup ) ; then
		# Library not found in relative path: search the typical location...
		write_information "${FUNCNAME[0]} 2 Using: $(find /opt -name _rtd_library |grep -v bakup )"
	elif wget ${_src_url} ; then
		# Critical failure: downloaded copy from github.com
		source ./_rtd_library
	else
		# Abot condition: No mitigation steps worked.
		echo -e "RTD functions NOT loaded!"
		echo -e " "
		echo -e "Cannot ensure that the correct functionality is available"
		echo -e "Quiting rather than cause potential damage..."
		exit 1
	fi
}







rtd_oem_check_inet_access ()
{
# Function to verrify internet availabiltiy.
# The funciton will pause for 10 seconds by default, and will accept
# an integer to indicate a non-decault time to pause.

	_ARG=$1
	if ! hash curl &>/dev/null; then
		read -t 10 -p "N O T I C E ! --  Could not check for internet connectivity... Please install (curl) web crawler/downloader. Press [ENTER] to continue and [CTRL] + [C] to exit! Continuing in 10 seconds..."
	else
		if [[ -z "$_ARG" ]]; then
			curl ipinfo.io &>/dev/null || ( read -p "N O T I C E ! -- NO INTERNET ACCESS: This script may require access to the internet to work properly! Press [ENTER] to continue and [CTRL] + [C] to exit!  " )
		else
			curl ipinfo.io &>/dev/null || ( read -t ${1:-10} -p "N O T I C E ! -- NO INTERNET ACCESS: This script may require access to the internet to work properly! Press [ENTER] to continue and [CTRL] + [C] to exit!  Continuing in ${1:-10} seconds..." )
		fi
	fi
}








check_menu_availability ()
{
# First discover what menu system is installed. Some systems use "dialog" and
# other systems use whiptail for the terminal to show menus and dialogs.
# If nothing is found, then make sure it is available before continuing.
# End of documentation
	if hash dialog 2>/dev/null ; then
		: "${RTD_GUI:=dialog --clear}"
		export RTD_GUI
	elif hash whiptail 2>/dev/null ; then
		: "${RTD_GUI:="whiptail --fb"}"
		export RTD_GUI
		if ( $RTD_GUI --backtitle "$BRANDING" --title "System Information Menu" --no-button "NO: Use whiptail" --yes-button "YES: Install dialog" --yesno "Please NOTE that we are using WHIPTAIL as a terminal menu system, which is missing several features compared to the default: DIALOG menu system. There are a few reasons we may be using WHIPTAIL instead: I was forced to use it or it is the only terminal menu system available... If you continue with the current WHIPTAIL some things might not work. \n \n May I please try to install the dialog system in stead? . \n  " 20 90 ); then
			RTD_GUI=dialog
			InstallSoftwareFromRepo dialog
			return
		else
			echo "User selected No, exit status was $?."
			return
		fi
	else
		err_no_menu_system_found dialog && return 1 || exit 1
	fi
}





#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::            Tool GUI Functions            ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Functions that control how the the RTD menus are displayed are listed below
# in this section for better manageability. When scripts become rather large
# they become cumbersome to manage, then it is sometimes helpful to sections
# in some logical order.
BRAND="  $BRANDING		Verson:$RTD_Version : on $HOSTNAME"
BRANDING=$BRAND




display_notice () {
	# Function to display a notice that the ISO creation is complete.
	# And describe what to de next.
	$RTD_GUI --backtitle "$BRANDING" \
	--title "About $( basename $0 ) " \
	--msgbox "
	This tool is part of the RTD System Support Tools.
	The purpose of this tool is to simplify management remote and local.

	This script simplifies:
	- Basic Virtual Machine management
	- Auto Create and deploy VMs (Linux and Windows)
	- Change password, and encryption phrases of system disk
	- Perform distribution upgrades (supported distributions)
	- Remove unused PPA's (where relevant)
	- Display system information and resource usage

	To use this tool simply execute it: $( basename $0 )
	This tool is usefull for support staff that do not live on the comman line daily, and
	can be used over ssh. If you do get disconnected the tool will remain active remotley
	and you can easily reconnect to it by re-establishing your ssh connection and typing
	the word: byobu in the terminal. "  $HEIGHT $WIDTH
	clear
}


show_notice_on_fist_run () {
	if [ -f ~/.config/rtd/rtd-first-run-$RTD_Version ]; then
		echo $RTD_Version has been used already and terms reviewed...
	else
		show_notice_on_fist_run_TEXT="
This looks like the first time you run this vesion of the RTD tools. Please note that these tools are provided as-is and for modification.

The RTD tools run in a separate terminal that you can re connect to if you should get disconnected; for example if you are
remotely connecting through SSH. This can be done by:
- re-connecting to the server with ssh
- then running command "byobu" if a session is already running on the server"

		$RTD_GUI --backtitle "$BRANDING" --title "DONE" --msgbox "$show_notice_on_fist_run_TEXT" 15 80
		mkdir -p ~/.config/rtd ; touch ~/.config/rtd/rtd-first-run-$RTD_Version
		clear
	fi
}


rtd_setup_choices_cli_workstation () {
	# Function to display legacy installation options. This will install software that is usefull
	# on a really old system, or a remote system only accessible via SSH. This may be a good
	# usecase if you happen to be in an opressed geographic locaiton where your only option is
	# to ssh to a remote server and access email and web that way. Perfomance in these cases
	# may be very poor over the internet (as for example with the great firewall of China). In
	# Such a case it would be usefull to have the good old CLI software! :)
	# List Options to be available for choice in the RTD System Configurator...
	cmd=( $RTD_GUI --backtitle "$BRANDING" --title "Terminal Software add on Options Menu" --separate-output --checklist "You can be productive in the cli environment. Please Select Software titles below that you want to add to this system:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" )
	options=(1 "Base RTD OEM Software (basic admin tools usually needed)" on
		 2 "Alpine email client" off
		 3 "Vim text editor" on
		 4 "Finch multi protocol chat" off
		 5 "Word Grinder word precessor" off
		 6 "Spreadsheet Calculator" off
		 7 "TPP Presentation Program" off
		 8 "Midnight Commander file manager (Norton Commander)" on
		 9 "Cmus Music Player" off
		 10 "Byobu Terminal Window Manger" off
		 11 "W3M web Browser" off
		 12 "LYNX Web Browser (Browse the web directly in the terminal)" off
		 13 "Mega.nz command line tools (Mega-CMD)" off
		 14 "Rtorrent torrent download software" off
		 15 "Install the OpenVpn client Software" off
		 16 "Games: Freesweep mine sweep game" off
		 17 "Games: Bastet Tetris Game" off
		)

		choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
		clear
		for choice in $choices
		do
			case $choice in
			1) for i in wine-stable ffmpeg netstat nmcli htop powertop iftop monit nethogs bmon darkstat ss mtr glances nmap iostat multitail ncdu multitail ; do InstallSoftwareFromRepo $i ; done ;;
			2) InstallSoftwareFromRepo alpine ;;
			3) InstallSoftwareFromRepo vim ;;
			4) InstallSoftwareFromRepo finch ;;
			5) InstallSoftwareFromRepo wordgrinder ;;
			6) InstallSoftwareFromRepo sc ;;
			7) InstallSoftwareFromRepo tpp ;;
			8) InstallSoftwareFromRepo mc ;;
			9) InstallSoftwareFromRepo cmus ;;
			10) InstallSoftwareFromRepo byobu ;;
			11) InstallSoftwareFromRepo w3m ;;
			12) InstallSoftwareFromRepo lynx ;;
			13) dl https://mega.nz/linux/MEGAsync/xUbuntu_19.04/amd64/ megacmd-*.deb ;;
			14) InstallSoftwareFromRepo rtorrent ;;
			15) InstallSoftwareFromRepo openvpn ;;
			16) InstallSoftwareFromRepo freesweep ;;
			17) InstallSoftwareFromRepo bastet ;;
			esac
		done
}


show_make_media_gui_server ()
{
	while true; do
		exec 3>&1
		selection=$($RTD_GUI \
		--backtitle "$BRANDING" --title "Create Automatic OS Install Media"  --menu "Please select which automatic operating system installation media to create.  (to Burn to CD, or trafer to a USB, or use with a VM):" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT"  \
		"1" "Automatic Install ISO for Ubuntu Server" \
		"2" "Automatic Install ISO for Ubuntu Graphical Server" \
		"3" "Automatic Install ISO for Debian Graphical Server" \
		"4" "Automatic Install ISO for Debian Minimal Server" \
		"5" "Automatic Install ISO for Minecraft Server (Latest)" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return	;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
		0 )
			echo "Program terminated by user..."
		;;
		1 )
			rtd_oem_ubuntu_auto_install_iso_builder openssh-server server
			cleanup_and_finish
		;;
		2 )
			rtd_oem_ubuntu_auto_install_iso_builder xubuntu-core server
			cleanup_and_finish
		;;
		3 )
			prepare_environment_for_iso_creation
			download_and_manipulate_iso_debian debian lxde-desktop server
			create_iso_image_debian
			cleanup_and_finish
		;;
		4 )
			prepare_environment_for_iso_creation
			download_and_manipulate_iso_debian debian openssh-server server
			create_iso_image_debian
			cleanup_and_finish
		;;
		5 )
			prepare_environment_for_iso_creation
			download_and_manipulate_iso_debian debian openssh-server MinecraftServer
			create_iso_image_debian
			cleanup_and_finish
                ;;
		esac
	done
}



show_make_media_gui_desktop () {
	# List Options to be available for choice in the RTD System Configurator...
	while true; do
		exec 3>&1
		selection=$($RTD_GUI \
		--backtitle "$BRANDING" --title "Create Automatic OS Install Media"  --menu "Please select which automatic operating system installation media to create:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT"  \
		"1" "Automatic Install Media for Ubuntu Standard Desktop (more MAC like)" \
		"2" "Automatic Install Media for Ubuntu with Plasma Desktop (more Windows like)" \
		"3" "Automatic Install Media for Ubuntu Gnome (without Ubuntu customization)" \
                "4" "Automatic Install Media for Ubuntu Minimal Standard desktop" \
		"5" "Automatic Install Media for Debian Default Desktop" \
		"6" "Automatic Install Media for Debian Light Weight Desktop" \
		"7" "Automatic Install Media for Debian Plasma Desktop" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return	;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
		0 )
			echo "Program terminated by user..."
		;;
		1 )
			rtd_oem_ubuntu_auto_install_iso_builder ubuntu-desktop desktop
			cleanup_and_finish
		;;
		2 )
			rtd_oem_ubuntu_auto_install_iso_builder kubuntu-desktop desktop
			cleanup_and_finish
		;;
		3 )
			rtd_oem_ubuntu_auto_install_iso_builder ubuntu-gnome-desktop desktop
			cleanup_and_finish
		;;
                4 )
			rtd_oem_ubuntu_auto_install_iso_builder ubuntu-desktop-minimal desktop
			cleanup_and_finish
		;;
		5 )
			prepare_environment_for_iso_creation
			download_and_manipulate_iso_debian debian-desktop desktop
			create_iso_image_debian
			cleanup_and_finish
		;;
		6 )
			prepare_environment_for_iso_creation
			download_and_manipulate_iso_debian debian cinnamon-desktop
			create_iso_image_debian
			cleanup_and_finish
		;;
		7 )
			prepare_environment_for_iso_creation
			download_and_manipulate_iso_debian debian kde-desktop
			create_iso_image_debian
			cleanup_and_finish
		;;
		esac
	done
}



show_manage_vm_gui () {
	# List Options to be available for choice in the RTD System Configurator...
	while true; do
		exec 3>&1
		selection=$($RTD_GUI \
		--backtitle "$BRANDING" \
		--title "VM Managment Menu"  \
		--menu "Please select what you would like to do below:"  "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
		"1" "List all virtual machines on this system" \
		"2" "Backup all running virtual machines on this server" \
		"3" "Monitor VM's on this system "\
		"4" "Deploy a VM on this server" \
		2>&1 1>&3 )
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return ;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
		0 )
			echo "Program terminated by user..."
		;;
		1 )
			if hash virsh ; then
				result=$(virsh list --all )
				display_result "Virtual Machinces on this system:"
			else
				echo KVM Virtualization is not installed on this machine.
			fi
		;;
		2 )
			backup_running_vm
		;;
		3)
			echo "VM Status on This HOST: Press [Q] to quit."
			check_dependencies virt-top
			virt-top
		;;
		4 )
			while true; do
				exec 3>&1
				subselection2=$($RTD_GUI --backtitle "$BRANDING" --title "Make Virtual Machine" --menu "    "  $HEIGHT $WIDTH $LIST_HEIGHT \
				"1" "Make a SERVER VM (Minimal single purpose system)" \
				"2" "Make a VDI VM (chose desktop and distribution)" \
				2>&1 1>&3)
				exit_status=$?
				exec 3>&-
				clear

				case $exit_status in
					"$DIALOG_CANCEL") return	;;
					"$DIALOG_ESC") return ;;
				esac

				case $subselection2 in
					0) echo "Program terminated."
					;;
					1) show_deploy_server_VM_now_menu
					;;
					2) show_deploy_VDI_VM_now_menu
					;;
				esac
			done
		;;
		esac
	done
}


show_deploy_server_VM_now_menu ()
{

		while true; do
		exec 3>&1
		selection=$($RTD_GUI \
		--backtitle "$BRANDING" --title "Deploy VM Server"  --menu "Please select which type of VM to create:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
		"1" "Ubuntu Server" \
		"2" "Ubuntu Graphical Server" \
		"3" "Debian Graphical Server" \
		"4" "Debian Minimal Server" \
                "5" "Minecraft Server" \
                "6" "Fedora Minimal Server" \
                "7" "Ansible Server" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return ;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
		0 )
			clear
			echo "Program terminated by user..."
		;;
		1 )
			make_preseed_cfg "$( mktemp -d )" ssh-server
			make_kvm_virtual_machine_now_from_ubuntu_com ubuntu20.04
			cleanup_and_finish nomessage
		;;
		2 )
			make_preseed_cfg "$( mktemp -d )" xubuntu-core
			make_kvm_virtual_machine_now_from_ubuntu_com ubuntu20.04
			cleanup_and_finish nomessage
		;;
		3 )
			make_preseed_cfg "$( mktemp -d )" lxde-desktop
			make_kvm_virtual_machine_now_from_debian_org debian10
			cleanup_and_finish nomessage
		;;
		4 )
			make_preseed_cfg "$( mktemp -d )" openssh-server
			make_kvm_virtual_machine_now_from_debian_org debian10
			cleanup_and_finish nomessage
		;;
		5 )
			make_preseed_cfg "$( mktemp -d )" openssh-server MinecraftServer
			make_kvm_virtual_machine_now_from_debian_org debian10
			cleanup_and_finish nomessage
		;;
		6 )
			PRESEED_FILE="$(mktemp)"
			generate_fedora_ks_cfg_file "${PRESEED_FILE}" ssh-server
			make_kvm_virtual_machine_now_from_fedora_org fedora30
			cleanup_and_finish nomessage
		;;
		7 )
			PRESEED_FILE="$(mktemp)"
			generate_fedora_ks_cfg_file "${PRESEED_FILE}" ansible-server
			make_kvm_virtual_machine_now_from_fedora_org fedora30
			cleanup_and_finish nomessage
		;;
		esac

	done
}


show_deploy_VDI_VM_now_menu ()
{
	while true; do
		exec 3>&1
		selection=$($RTD_GUI --backtitle "$BRANDING" --title "Deploy Virtual Desktop (VDI)"  --menu "Please select which VDI to create on this server:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
		"1" "Ubuntu Standard Desktop (more MAC like)" \
		"2" "Kubuntu Desktop (more Windows like)" \
		"3" "Lubuntu Desktop" \
                "4" "Xubuntu (light weight) desktop" \
		"5" "Debian Default Desktop" \
		"6" "Debian Cinnamon Desktop" \
		"7" "Debian Plasma Desktop" \
		"8" "Debian Light Weight Desktop (LXDE)" \
		"9" "Fedora Workstation VDI" \
		"10" "SUSE Workstation VDI" \
		"11" "Windows 10 VDI" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return ;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
		0 )
			echo "Program terminated by user..."
		;;
		1 )
			make_preseed_cfg "$( mktemp -d )" ubuntu-desktop
			make_kvm_virtual_machine_now_from_ubuntu_com ubuntu20.04
		;;
		2 )
			make_preseed_cfg "$( mktemp -d )" kubuntu-desktop
			make_kvm_virtual_machine_now_from_ubuntu_com ubuntu20.04
		;;
		3 )
			make_preseed_cfg "$( mktemp -d )" lubuntu-desktop
			make_kvm_virtual_machine_now_from_ubuntu_com ubuntu20.04
		;;
                4 )
			make_preseed_cfg "$( mktemp -d )" xubuntu-desktop
			make_kvm_virtual_machine_now_from_ubuntu_com ubuntu20.04
		;;
		5 )
			make_preseed_cfg "$( mktemp -d )" gnome-desktop
			make_kvm_virtual_machine_now_from_debian_org debian10
			cleanup_and_finish nomessage
		;;
		6 )
			make_preseed_cfg "$( mktemp -d )" cinnamon-desktop
			make_kvm_virtual_machine_now_from_debian_org debian10
			cleanup_and_finish nomessage
		;;
		7 )
			make_preseed_cfg "$( mktemp -d )" kde-desktop
			make_kvm_virtual_machine_now_from_debian_org debian10
			cleanup_and_finish nomessage
		;;
		8 )
			make_preseed_cfg "$( mktemp -d )" lxde-desktop
			make_kvm_virtual_machine_now_from_debian_org debian10
			cleanup_and_finish nomessage
		;;
		9 )
			PRESEED_FILE="$(mktemp)"
			generate_fedora_ks_cfg_file "${PRESEED_FILE}" workstation
			make_kvm_virtual_machine_now_from_fedora_org fedora30
			cleanup_and_finish nomessage
		;;
		10 )
			PRESEED_FILE="$(mktemp)"
			generate_autoyast_file "${PRESEED_FILE}"
			make_kvm_virtual_machine_now_from_opensuse_com SUSE
			cleanup_and_finish nomessage
		;;
		11 )
			make_kvm_virtual_machine_now_from_microsoft
		;;
		esac

	done
}


show_view_informaion_about_this_system () {
	while true; do
		exec 3>&1
		selection=$($RTD_GUI --keep-tite --backtitle "$BRANDING" --title "System Information Menu" --menu "" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
		"1" "Show system summary" \
		"2" "Display OS Informaton" \
		"3" "View Windows Product KEY in system BIOS (if present)" \
		"4" "Show storage device space utilization" \
		"5" "Show users HOME folder storage use" \
		"6" "Show complete storage utilization by directory" \
		"7" "Show system temperature information" \
		"8" "Show detailed system CPU information" \
		"9" "List PCI Devices" \
		"10" "List USB devices" \
		"11" "Show systems physical location (city, county etc.)" \
		"12" "Show the weather forcast at the location of this system" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear ; unset result

		case $exit_status in
			"$DIALOG_CANCEL") return	;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
		0 )
			echo "Program terminated by user..."
		;;
		1 )
			check_dependencies neofetch
			neofetch --memory_display barinfo
			ip -br addr
			read -p "Press [Enter] key to return to the main menu: "
		;;
		2 )
			result=$(hostnamectl)
			: ${result:="No system information found..."}
			display_result "OS Information:"
		;;
		3 )
			result=$(get_Windows_Product_Key)
			: ${result:="No Windows product key found..."}
			display_result "Windows Product Key:"
		;;
		4 )
			result=$(df -h -x squashfs -x tmpfs)
			$RTD_GUI --backtitle "$BRANDING" --title "System Storage Space" --msgbox "$result" 20 100
		;;
		5 )
			generate_report_disk_space_used_by_directory /home
			display_result "Home Space Utilization (All Users)"
		;;
		6 )
			generate_report_disk_space_used_by_directory /
			display_result "Total Space Utilization root directory:"
		;;
		7 )
			check_dependencies lm-sensors
			sudo /etc/init.d/kmod start
			check_dependencies hddtemp
			sudo sensors-detect --auto
			result="$( sensors )"
			display_result "System Temperature Information"
		;;
		8 )
			result="$( lscpu )"
			display_result "System CPU Information on $HOSTNAME:"
		;;
		9 )
			${RTD_GUI:-dialog} --backtitle "$BRANDING" --colors --no-collapse --title "\Z1 Local PCI devices on $HOSTNAME:" --msgbox "$(lspci)" ${HEIGHT:-"20"} 0
			clear
		;;
		10 )
			${RTD_GUI:-dialog} --backtitle "$BRANDING" --colors --no-collapse --title "\Z1 Local USB devices on $HOSTNAME:" --msgbox "$(lsusb)" ${HEIGHT:-"20"} 0
			clear
		;;
		11 )
			check_dependencies curl &>/dev/null
			check_dependencies dnsutils &>/dev/null
			result=$(curl ipinfo.io/$(dig +short myip.opendns.com @resolver1.opendns.com))
			display_result "This systems location on the Internet"
		;;
		12 )
			check_dependencies curl
			write-host "Your local weather is"
			curl http://wttr.in
			read -p "Press [Enter] key to return to the main menu: "
		;;
		esac
	done
}


show_manage_software_gui () {
	# List Options to be available for choice in the RTD System Configurator...
	while true; do
		exec 3>&1
		selection=$($RTD_GUI \
		--backtitle "$BRANDING" --title "Software Managment Menu"  --menu "" $HEIGHT $WIDTH $LIST_HEIGHT \
		"1" "Update all software on this system" \
		"2" "Show what Personal Package Archives (PPA's) are defined on this system" \
		"3" "Remove all Personal Package Archives (PPA's) NOT in use on this system" \
		"4" "Attempt a full release upgrade " \
		"5" "Install Non-GUI productivity tools for a useful terminal based workstation" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			$DIALOG_CANCEL) return	;;
			$DIALOG_ESC) return ;;
		esac

		case $selection in
		0 )
			exit_status=$?
		;;
		1 )
			rtd_update_system ; rtd_oem_pause 1
		;;
		2 )
			dist_info="$(hostnamectl)"
			if echo $dist_info |grep ".*buntu" &>/dev/null ; then
				result="$(rtd_ppa_checker)"
				display_result "Packages Installed from Personal Package Archives"
			elif echo $dist_info |grep "Pop!_OS" 2>/dev/null ; then
				result="$(rtd_ppa_checker)"
				display_result "Packages Installed from Personal Package Archives"
			else
				result="Non Ubuntu based distributions do not Support the use of Personal Package Archives \n Press [ OK ] to return to the prevous menu."
				display_result "Functionality Not Supported"
			fi
		;;
		3 )
			dist_info="$(hostnamectl)"
			if echo $dist_info |grep ".*buntu" &>/dev/null ; then
				rtd_ppa_checker --delete | $RTD_GUI --programbox "Personal Package Archive Check:" $HEIGHT $WIDTH
			elif echo $dist_info |grep "Pop!_OS" 2>/dev/null ; then
				rtd_ppa_checker --delete | $RTD_GUI --programbox "Personal Package Archive Check:" $HEIGHT $WIDTH
			else
				result="Non Ubuntu based distributions do not Support the use of Personal Package Archives \n Press [ OK ] to return to the prevous menu."
				display_result "Functionality Not Supported"
			fi
		;;
		4 )
			rtd_oem_release_upgrade
		;;
		5 )
			rtd_setup_choices_cli_workstation
		;;
		esac
	done
}


show_main_menu () {
	while true; do
		exec 3>&1
		selection=$( $RTD_GUI --keep-tite --backtitle "$BRANDING" --cancel-button "EXIT" --title "RTD Tool Main Menu" --menu "" $HEIGHT $WIDTH $LIST_HEIGHT \
			"1" "View information about this system" \
			"2" "Manage Software on this system" \
			"3" "Manage Virtual Machines (KVM) on this system" \
			"4" "Manage encryption phrases and passwords" \
			"5" "Make media to automatically install OS (for VM's and CD burning)" \
			"6" "Shortcut: Update this system now"\
			"7" "About this tool" \
			2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			$DIALOG_CANCEL)
				clear
				echo "Program terminated."
				exit 0
			;;
			$DIALOG_ESC)
				clear
				echo "Program aborted." >&2
				exit 0
			;;
		esac

		case $selection in
			0 )
				echo "Program terminated."
			;;
			1 )	show_view_informaion_about_this_system
			;;
			2 )	show_manage_software_gui
			;;
			3 )	show_manage_vm_gui
			;;
			4 )	show_manage_crypt_sec
			;;
			5 )
			while true; do
				exec 3>&1
					subselection1=$($RTD_GUI --backtitle "$BRANDING" --title "Create Automatic OS Install Media" --menu "Please select if you need to make media for a server or a desktop. You will be aksed if you you want to transfer the media to a DC/DVD/USB Stick or deploy directly as a VM"  $HEIGHT $WIDTH $LIST_HEIGHT \
					"1" "Make media to build a server (ISO or USB Disk)" \
					"2" "Make media to build a Desktop environment (ISO or USB Disk)" \
					2>&1 1>&3)
				exit_status=$?
				exec 3>&-
				clear

				case $exit_status in
					$DIALOG_CANCEL) show_main_menu ;;
					$DIALOG_ESC) return ;;
				esac

				case $subselection1 in
					0 ) echo "Program terminated."
					;;
					1 ) show_make_media_gui_server
					;;
					2 ) show_make_media_gui_desktop
					;;
				esac
			done
			;;
			6 )
				rtd_update_system
				read -p "Press [Enter] key to return to the main menu: "
			;;
			7 )
			display_notice
			;;
		esac
	done
}


show_manage_crypt_sec () {
	while true; do
		exec 3>&1
		selection=$($RTD_GUI \
			--backtitle "$BRANDING" \
			--title "Manage encryption phrases and passwords" \
			--menu "" $HEIGHT $WIDTH $LIST_HEIGHT \
			"1" "Check if a password is stolen" \
			"2" "Change systems disk encrytion pass phrase" \
			"3" "Change "$SUDO_USER" password" \
			2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			$DIALOG_CANCEL) return ;;
			$DIALOG_ESC) return ;;
		esac

		case $selection in
			0 )
				echo "Program terminated."
			;;
			1 )
				check_if_password_p0wned
			;;
			2 )
				change_disk_pass
			;;
			3 )
				passwd $SUDO_USER
			;;
		esac
	done
}




#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script templates                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Useful code sniplet templates. Copy and paste these and the edit them
# as necessary to extend the functoinality of this tool.
#




menu_template () {
	while true; do
		exec 3>&1
		# Dialog Display Menu Items...
			selection=$($RTD_GUI \
				--backtitle "$BRANDING" \
				--title "Menu Title" \
				--menu "Please tell me what I can do for you:" $HEIGHT $WIDTH $LIST_HEIGHT \
				"1" "Description" \
				"2" "Description" \
				"3" "Description" \
				2>&1 1>&3)
			exit_status=$?
			exec 3>&-
			clear

		# Cases for how program exited...
		case $exit_status in
			$DIALOG_CANCEL)
				clear
				echo "Program terminated."
				exit
			;;
			$DIALOG_ESC)
				clear
				echo "Program aborted." >&2
				exit 1
			;;
		esac

		# What to do depending on selection...
		case $selection in
			0 )
				clear
				echo "Program terminated."
			;;
			1 )
				# code
			;;
			2 )
				# code
			;;
			3 )
				# code
			;;
		esac
	done
}











#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Main Init                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Below is the logic for starting this script. As this script pretty much exclusively uses
# functions and function calls for everything it is simple to control the flow of execution here.
# We must ensure that the script is run at the proper privileges and in a
# re-attachable session. This means that this script will not allow itself to be run in
# a root terminal or using the sudo command. The reason for this is that, in order to start in
# a detachable terminal session "byobu", it may not be launched by root. The script will
# need to be run as a normal administrative user with access to "sudo" a.k.a. a member of the
# "sudoers" security group. This helps adhere to the best practice of NOT using a root interactive
# terminal.

if [[ -z "$BASH_VERSINFO" ]]; then
	echo "ERROR: You must execute this script in a BASH Shell"
	exit 255
fi

case $1 in
	about | --about | --help | -h )
		display_notice				# Display script information
		exit
	;;
	* )
		if [[ "$TERM" == screen* ]]; then

			rtd_oem_check_inet_access               # Confirm what to do if no internet access.
			check_rtd_library                       # If the required system managment library available?
			ensure_admin                            # Do we have admin priviledges?
				if [ ! "$UID" -eq 0 ]; then
					write_error "UID not 0!"
					rtd_oem_pause 1
				fi
			check_menu_availability                 # Can we display menus and ask questions?
			show_notice_on_fist_run                 # Is this the first time this is used on this computer?
			show_main_menu                          # If all is OK, display the system admin menu!
		else
			if hash byobu 2>/dev/null; then
				byobu new-session -s "RTD Simple Server Support Tools" $0
				#clear
			else
				rtd_oem_check_inet_access		# Confirm what to do if no internet access (internal).
				check_rtd_library			# Ensure that the needed libraries are available.
				check_dependencies byobu && echo -e "$RED" "A critical component needed for this script to work properly was attempted to be added... Attempting to run the script again"
				su -c "$0 $*" "$SUDO_USER"
				clear
			fi
		fi
	;;
esac
