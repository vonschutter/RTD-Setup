#!/bin/bash
#
#::             			A D M I N   T O O L
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Admin Tool //::::::::::::::::::::::::::::::::::::::::// Linux //::::::::
#::
#:: Author:   	SLS
#:: Version 	1.02
#::
#::
#::	Purpose: The purpose of this script is to switch from one gnome desktop
#::		 look and feel to another (Mac like, windows 10 like, original distro).
#::
#::     Usage:	Simply execute this commandlet to accomplish this task. No parameters required.
#:: 		NOTE: Please refer to: https://www.huion.com/pen_tablet/
#::
#::
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# This script is shared in the hopes that someone will find it useful.
# For convenience and supportability most actions (work) is stored in a common library used bu multiple scripts.
# To use these functions in the library, simply load the library using the "source" bash built in command. All
# functions will then be available for use. This script demonstrates the simplicity of using these functions.
#
# This script is intended to live in the ~/bin/ or /bin/ folder, alternatively in the $PATH.
# By default this script is placed in /opt/rtd/scrips/
#
# 1 - To see options to use the rtd library type: "bash _rtd_library --help"
# 2 - To see usefull documentation on each function in this library: "bash _rtd_library --devhelp"



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

_LOG_DIR="${HOME}/.config/rtd/log"
_LOGFILE="${_LOG_DIR}/$(basename $0).log"

mkdir -p "${_LOG_DIR}"
touch $_LOGFILE

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


# This script requires the bash library "rtd library", so if it is not present;
# a copy must be downloaded.

dependency::file ()
{
	local _src_url="https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/core/${1}"
	local _tgt="${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Requested dependency file: ${1} ..."

		for i in "./${1}" "../core/${1}" "../../core/${1}" "${0%/*}/../core/${1}" "${0%/*}/../../core/${1}" "$(find /opt -name ${1} |grep -v bakup )" ; do 
			echo "${FUNCNAME[0]}: Searching for ${i} ..."
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}"
				source "${i}" ""
				return 0
			fi
		done
		return 1
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		echo "$(date) failure to find $1 on the local comuter, now searching online..."
		if curl -sL $_src_url | source /dev/stdin ; then 
			echo "${FUNCNAME[0]} Using: ${_src_url} directly from URL..."
		elif wget ${_src_url} &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url} downloaded..."
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 
}





#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Executive                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Ensure access to the rtd library functions:
date &>>"${_LOGFILE}"
dependency::file _rtd_library &>>"${_LOGFILE}"
dependency::os_linux || ( 
	echo "This script is intended for Linux only!"
	exit 1 
	)




if dependency::desktop gnome ; then 
	zenity --info --text "Please be advised: the developers of Gnome have limited the ability to use Themes. So not all elements may be set correctly... " 
	while true; do
		exec 3>&1
		DefaultDistro=$(hostnamectl |grep "Operating System" |cut -d: -f2)
		DefaultTitle=$( basename $0 ) ; DefaultTitle=${DefaultTitle//-/ }
		ProgressTXT="Working..."

		selection=$(zenity --title="${DefaultTitle^^}" --list \
		--text "        Select your prefferred style of desktop look below. Please NOTE: that the resulting look is just an
		adjustment to look more like what you may be used to, and not a perfect replica of the original look.
		Though some may say that the look and function this Gnome variant is an improvement over the originals.
		" \
		--height="400" --width="830" \
		--print-column=1 --column "Look" --column "Description" \
		"Windows 10 Dark Mode" "Change the look of this desktop be more like Windows 10 Dark" \
		"Windows 10 Light Mode" "Change the look of this desktop be more like Windows 10 Light" \
		"Mac OS Bright" "Change the look of this desktop for be more like Apple's MAC OS" \
		"Mac OS Dusk" "Change the look of this desktop for be more like Apple's MAC OS" \
		"Crisp Day" "Crisp and clean proffessional business look (Tuned for day time)" \
		"Crisp Evening" "Crisp and clean proffessional business look (Tuned for evening time)" \
		"Moca Smooth" "A dark and chocolate smooth comfortable look" \
		"${DefaultDistro/ /}" "The default look and feel of ${DefaultDistro/ /} (this distribution of Linux)" ) &>>"${_LOGFILE}"
		exit_status=$?

		exec 3>&-
		case $exit_status in
			1) clear && echo [Cancel] && exit ;;
			255) clear && echo [ESC] && exit ;;
		esac

		write_status "OK setting OEM theme: ${selection}"  &>>"${_LOGFILE}"

		case "${selection}" in
			"Windows 10 Dark Mode" ) set_gnome_ui_win10_tweaks_for_user Dark & sleep 5 ; notify-send --urgency=low "${selection} set" ;;
			"Windows 10 Light Mode" ) set_gnome_ui_win10_tweaks_for_user Light & sleep 5 ; notify-send --urgency=low "${selection} set" ;;
			"Mac OS Bright" ) set_gnome_ui_mac_tweaks_for_user Light & sleep 5 ; notify-send --urgency=low "${selection} set"  ;;
			"Mac OS Dusk" ) set_gnome_ui_mac_tweaks_for_user Dark & sleep 5 ; notify-send --urgency=low "${selection} set" ;;
			"Crisp Day" ) set_gnome_ui_corprate_crisp_tweaks_for_user Light & sleep 5 ; notify-send --urgency=low "${selection} set" ;;
			"Crisp Evening" ) set_gnome_ui_corprate_crisp_tweaks_for_user Dark & sleep 5 ; notify-send --urgency=low "${selection} set" ;;
			"Moca Smooth" ) set_gnome_ui_moca_tweaks_for_user & sleep 5 ; notify-send --urgency=low "${selection} set" ;;
			"${DefaultDistro/ /}" )
				# Resetting deskop environment to distribution defaults!
				KeyboardLanguage=$(gsettings get org.gnome.desktop.input-sources sources )
				dconf reset -f /org/gnome/
				busctl --user call org.gnome.Shell /org/gnome/Shell org.gnome.Shell Eval s 'Meta.restart("Reloadig Gnome with the new settings...")'
				notify-send --urgency=low "UI reset to: ${selection}"
				gsettings set org.gnome.desktop.input-sources sources "${KeyboardLanguage}"
				;;
			* )
			# Trap unknown exit code...
			exit
			;;
		esac
	done
else 
	if dependency::desktop kde ; then
		echo "Found KDE -- Using kcm_lookandfeel instead..." >> "${_LOGFILE}"
		kcmshell5 kcm_lookandfeel  &>>"${_LOGFILE}"
	else
		echo "Neither Gnome or KDE found -- Notifying and quitting... " >> "${_LOGFILE}"
		zenity --info --text "You are not using the gnome desktop so it does not make sense to use this tool... " 
		exit 1
	fi 
fi
