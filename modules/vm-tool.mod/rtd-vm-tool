#!/bin/bash
#::				S I M P L E     S Y S T E M   S U P P O R T    T O O L
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::// Linux //::::::::
#:: Author(s):   	SLS, KLS, NB.  Buffalo Center, IA & Avarua, Cook Islands
:	${RTD_Version=0.2.0}
:	${GIT_Profile:=vonschutter}
#::
#::
#::	Purpose: To simplify support tasks
#::		  - Managing VM's
#::
#::     Usage: run the script "bash /path/to/rtd" or if installed in the $PATH; by rtd simply type "rtd" in a terminal.
#::
#::     This script is shared in the hopes that
#::     someone will find it usefull.
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#	NOTE:	This terminal program is written to be readable and documented to a very high degree. The reason is that
#		these apps are seldom changed and when they are, it is usefull to be able to understand why and how
#		things were built. Obviously, this becomes a useful learning tool as well; for all people that want to
#		learn how to write admin scripts. It is a good and necessary practice to document extensively and follow
#		patterns when building your own apps and config scripts. Failing to do so will result in a costly mess
#		for any organization after some years and people turnover.
#
#		As a general rule, we prefer using functions extensively because this makes it easier to manage the script
#		and facilitates several users working on the same scripts over time.
#
#
#	RTD admin scrips are placed in /opt/rtd/scripts. Optionally scripts may use the common
#	functions in _rtd_functions and _rtd_recipies:
#
#	  _rtd_functions -- contain usefull admin functions for scripts, such as "how to install software" on different systems.
#	  _rtd_recipies  -- contain software installation and configuration "recipies".
#
#	Scripts may also be stand-alone if there is a reason for this. This script is written to function independently
#	so that it is easy to copy to many server systems, or just to use once on a remote system. This is accomplished by
#	including all functions and dependency checking in this script; as well as avoidnig relying on external files like
#	*.diff files. As a consequence of the portability benefit this script becomes rather large and time consuming to navigate.
#
#	Taxonomy of this script: we prioritize the use of functions over monolithic script writing, and proper indentation
#	to make the script more readable. Each function shall also be documented to the point of the obvious.
#	Suggested function structure per google guidelines:
#
#	function_descriptive_name () {
#		# Documentation and comments...
#		...code...
#	}
#
#
#	Our scripts are also structured in to three major sections: "settings", "functions", and "execute".
#	Settings, contain configurable options for the script. Functions, contain all functions. Execute,
#	contains all the actual logic and control of the script.
#
#
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::            Script Settings               ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# You may comment out or edit items as you deem necessary.
# Some formatting options for cli graphic display.
if [[ -z "$BASH_VERSINFO" ]]; then
	echo "ERROR: You must execute this script in a BASH Shell"
	exit 255
fi


: ${_SCRIPTNAME=$(basename $0)}
: ${_TLA=${_SCRIPTNAME:0:3}}
: ${BRANDING_ORG:="RunTime Data"}
: ${PRODUCT:="VM Tool"}
: ${BRANDING:=" ${BRANDING_ORG}: ${PRODUCT}"}
: ${DIALOG_CANCEL:="1"}
: ${DIALOG_ESC:="255"}
: ${HEIGHT:="20"}
: ${WIDTH:="90"}
: ${LIST_HEIGHT:="12"}
: ${_GIT_PROFILE:="vonschutter"}
: ${_GIT_REPO:="RTD-Setup"}

# Show backtitle and version in UI
: ${BACKTITLE:="💻 ${BRANDING}                       Managing VM's on:  ${HOSTNAME}                   Version: ${RTD_Version}"}


# Terminal Color Setup definitions. These settings allow the simlified use of
# text colors in the teminal. You may want to echo RED for error or GREEN for OK.
: ${YELLOW:="\033[1;33m"}
: ${RED:="\033[1;31m"}
: ${ENDCOLOR:="\033[0m"}
: ${GREEN:="\033[1;32m"}
: ${BLUE:="\033[1;34m"}

# Set the background color of the tool. The appearance of the menu system may
# look different on different systems depending on their default settings.
# Here we define the bacground color for consistency by seting the NEWT_COLORS= option. If "dialog"
# is the desired front end then you may set the DIALOG_COLORS= optoin for preferred colors.
# You may select a front end to the rtd tool below by seting the RTD_GUI= option. This will
# override what is detected and preferred!
# Valid choices are: "dialog", "whiptail".
# RTD_GUI=dialog
# export NEWT_COLORS='root=,gray '
: ${RTD_GUI:="dialog"}



# Override default values here:
# SSH_PUBLIC_KEY_FILE=
# PUT_ISO_FILE_HERE_WHEN_DONE=
# PUT_QCOW_FILE_HERE_WHEN_DONE=
# VOLUME_TITLE=


# Set location to where to log information:
# in the system log directory in a file named the same as this script.
# The global variable _LOGFILE is used by _rtd_library to log information.
: ${_LOG_DIR:="/var/log/rtd"}
_LOGFILE="${_LOG_DIR}/$( basename $0 ).log"




#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::            Tool Executive Functions      ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Below please find the executive functions of this script. These are the functions
# that actually do the work requested.

main() {
	# This is the main function of this script. It is called when the script is executed

	dependency::file _rtd_library
	security::ensure_admin

	case $1 in
		about | --about | --help | -h )
			display_notice
			exit
		;;
		--first-run | -f )
			show_notice_on_fist_run
			exit
		;;
		* )
			if [[ "$TERM" == screen* ]]; then

				if [ -z "${RTDFUNCTIONS}" ]; then
					dependency::file _rtd_library &>/dev/null|| { echo "📚 Failed to find _rtd_library"; exit 1; }
				else
					write_information "📚 _rtd_library is already loaded..."
				fi

				security::ensure_admin
				if [ "$UID" -eq 0 ]; then
					show_notice_on_fist_run
					vmtool::show_main_menu
				fi
				exit
			else
				if hash byobu &>/dev/null; then
					byobu new-session -s "RunTime Data VM Tool" "$0"
				else

					if [ -z "${RTDFUNCTIONS}" ]; then
						dependency::file _rtd_library &>/dev/null|| { echo "📚 Failed to find _rtd_library"; exit 1; }
					else
						write_information "📚 _rtd_library is already loaded..."
					fi
					
					security::ensure_admin
					if [ "$UID" -eq 0 ]; then
						software::check_native_package_dependency byobu && echo -e "$RED" "A critical component needed for this script to work properly was attempted to be added... Attempting to run the script again"
						su -c "$0 $*" "$SUDO_USER"
						clear
					fi
					exit
				fi
			fi
		;;
	esac
}

dependency::file() {
	local _src_url="https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/core/${1}"
	local _tgt="${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Requested dependency file: ${1} ..."

		for i in "./${1}" "../core/${1}" "../../core/${1}" "${0%/*}/../core/${1}" "${0%/*}/../../core/${1}" "$(find /opt -name ${1} |grep -v bakup )" ; do 
			echo "${FUNCNAME[0]}: Searching for ${i} ..."
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}"
				source "${i}" ""
				return 0
			fi
		done
		return 1
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		echo "$(date) failure to find $1 on the local comuter, now searching online..."
		if curl -sL $_src_url | source /dev/stdin ; then 
			echo "${FUNCNAME[0]} Using: ${_src_url} directly from URL..."
		elif wget ${_src_url} &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url} downloaded..."
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 
}









#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::            Tool GUI Functions            ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Functions that control how the the RTD menus are displayed are listed below
# in this section for better manageability. When scripts become rather large
# they become cumbersome to manage, then it is sometimes helpful to sections
# in some logical order.






display_notice() {
	system::log_item "INFO" "Displaying about information for $( basename $0 )"

	$RTD_GUI --backtitle "$BACKTITLE" \
	--title "About $( basename $0 ) " \
	--msgbox "
	This tool is part of the RunTime Data System Support Tools.
	The purpose of this tool is to simplify management of remote and local Linux systems.

	This script simplifies:
	- Basic Virtual Machine management
	- Auto Create and deploy VMs (Linux and Windows)
	- Auto download and install Linux and Windows in to VM templates
	- Change and create user preferences for the VM templates
	- Monitor running VM's

	To use this tool simply execute it: $( basename $0 )
	This tool is useful for support staff that do not live on the command line daily, and
	can be used over ssh. If you do get disconnected the tool will remain active remotely
	and you can easily reconnect to it by re-establishing your ssh connection and typing
	the word: byobu in the terminal. "  ${HEIGHT} ${WIDTH} 2>&1
	clear
}


show_notice_on_fist_run() {

	if [ -f ~/.config/rtd/rtd-first-run-${SCRIPTNAME}-${RTD_Version} ]; then
		write_status "$RTD_Version has been used already and terms reviewed..."
		return 0
	fi
	local tmpfile
	tmpfile=$(mktemp)

	cat >> "$tmpfile" <<-EOF

	 This looks like the first time you run this vesion of the VM Tool. Please note that this 
	 tool is provided as-is and for modification.

	 The RTD tools run in a separate terminal that you can re connect to if you should get 
	 disconnected; for example if you are remotely connecting through SSH. This can be done by:

	 - re-connecting to the server with ssh
	 - then running command byobu if a session is already running on the server

	 If you are not familiar with the byobu terminal program, please take a moment to read 
	 the documentation on how to use it.

	 The authors of this tool are not responsible for any damage or loss of data
	 that may occur as a result of using this tool. The authors of this tool are not 
	 responsible for any damage or loss of data. 

	 This tool is provided under the terms of the GNU General Public License (GPL) version 3.0. 
	 You may use this tool for any purpose, including commercial as outline in the licence below: 

	___________________________________________________________________________________________

	$(cat $_OEM_DIR/LICENSE || echo "License file not found, please lookup the licence online.")

	EOF

	$RTD_GUI --backtitle "$BACKTITLE" --no-collapse \
	--title "ABOUT $( basename $0 )" --textbox "$tmpfile" \
	${HEIGHT} ${WIDTH} 2>&1

	rm -f "$tmpfile" 
	
	mkdir -p ~/.config/rtd ; touch ~/.config/rtd/rtd-first-run-${SCRIPTNAME}-${RTD_Version}
	clear
}




clone_server_template_vm() {
	# Description:
	#   Lists all existing VMs with names starting with "Template" and containing "server" using `virsh`.
	#   Displays them in a dialog menu. When one is selected, clones it, removing the "Template" prefix.
	#
	# Globals:
	#   RTD_GUI, BACKTITLE, HEIGHT, WIDTH, LIST_HEIGHT, DIALOG_CANCEL, DIALOG_ESC
	#
	# Returns:
	#   0 on success, 1 on failure

	local vm_list
	local -a menu_entries
	local template_name selected_name new_name
	local index=1

	if ! command -v virsh >/dev/null || ! command -v "$RTD_GUI" >/dev/null; then
		write_error "❌ Required software not found: may I install it for you?"
		read -ep "Press Enter to continue..."
		software::check_native_package_dependency virsh dialog
		if ! command -v virsh >/dev/null || ! command -v "$RTD_GUI" >/dev/null; then
			write_error "❌ Required commands not found: virsh or dialog wrapper ($RTD_GUI), please install them manually."
			return 1
		fi
		write_information "✅ Required software installed successfully."
		return 1
	fi

	if ! vm_list=$(virsh list --all --name | grep -i '^Template' | grep -i 'server'); then
		dialog::display_error "❌ No Server Virtual Machine Templates found on this system. Please create a template VM first."
		return 1
	fi

	while IFS= read -r template_name; do
		[[ -z "$template_name" ]] && continue
		menu_entries+=("$index" "$template_name")
		((index++))
	done <<< "$vm_list"

	if (( ${#menu_entries[@]} == 0 )); then
		write_error "❌ No Template VMs found to clone"
		return 1
	fi

	while true; do
		exec 3>&1
		selected_index=$("$RTD_GUI" \
			--backtitle "$BACKTITLE" --cancel-button "Back" \
			--title "Clone Template Server VM" \
			--menu "Select a Template VM to clone:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
			"${menu_entries[@]}" \
			2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case "$exit_status" in
			"$DIALOG_CANCEL"|"$DIALOG_ESC") return 0 ;;
		esac

		template_name="${menu_entries[((selected_index - 1) * 2 + 1)]}"
		new_name="${template_name#Template_}"
		new_name="${new_name%%__*}"
		new_name="${new_name}_$(date +%Y%m%d_%H%M%S)"

		write_status "📀 Cloning VM '$template_name' to '$new_name'..."
		if virsh dominfo "$new_name" &>/dev/null; then
			write_error "⚠️ VM '$new_name' already exists. Choose a different name or remove the existing VM."
			sleep 2
			continue
		fi

		if ! virt-clone --original "$template_name" --name "$new_name" --auto-clone; then
			write_error "❌ Failed to clone VM '$template_name'"
			return 1
		fi

		write_information "✅ VM '$new_name' created successfully from template '$template_name'"
		sleep 2
		return 0
	done
}


manage_server_vm_templates() {
	while true; do
		exec 3>&1
		selection=$($RTD_GUI \
		--backtitle "$BACKTITLE" --cancel-button "Back" --title "Create Template VM Server"  --menu "Please select which type of VM to create:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
		"1" "🐧 Ubuntu Server" \
		"2" "🐧 Ubuntu LAMP Server" \
		"3" "🐧 Ubuntu Postfix Server" \
		"4" "🐧 Ubuntu Bind9 Server" \
		"5" "🐧 Ubuntu DHCP Server" \
		"6" "🐧 Ubuntu Samba Server" \
		"7" "🐧 Ubuntu Print Server" \
		"8" "🐧 Ubuntu Graphical Server" \
		"9" "🌀 Debian Print Server" \
		"10" "🌀 Debian Minimal Server" \
		"11" "⛏️ Minecraft Server" \
		"12" "🎩 Fedora Minimal Server" \
		"13" "🎩 Fedora Ansible Server" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return ;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
			0 )
				clear
				write_information "Program terminated by user..."
			;;
			1 )
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app ubuntu-server --ask YES
				cleanup_and_finish nomessage
			;;
			2 )
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app lamp-server --ask YES
				cleanup_and_finish nomessage
			;;
			3 )
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app postfix --ask YES
				cleanup_and_finish nomessage
			;;
			4 )
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app bind9 --ask YES
				cleanup_and_finish nomessage
			;;
			5 ) 
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app dhcp-server --ask YES
				cleanup_and_finish nomessage
			;;
			6 ) 
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app samba --ask YES
				cleanup_and_finish nomessage
			;;
			7 ) 
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app print-server --ask YES
				cleanup_and_finish nomessage
			;;
			8 )
				kvm::make_vm_now_from_ubuntu_com --role server --flavor ubuntu --server-app server-desktop --DE xubuntu-desktop --ask YES
				cleanup_and_finish nomessage
			;;
			9 )
				kvm::make_vm_now_from_debian_org --role server --server_role print-server
				cleanup_and_finish nomessage
			;;
			10 )
				kvm::make_vm_now_from_debian_org --role server --server_role openssh-server
				cleanup_and_finish nomessage
			;;
			11 )
				kvm::make_vm_now_from_ubuntu_com --role server --pre-config minecraft --tshirt-size medium
				cleanup_and_finish nomessage
			;;
			12 )
				PRESEED_FILE="$(mktemp)"
				generate_fedora_ks_cfg_file "${PRESEED_FILE}" ssh-server
				kvm::make_vm_now_from_fedora_org fedora30
				cleanup_and_finish nomessage
			;;
			13 )
				PRESEED_FILE="$(mktemp)"
				generate_fedora_ks_cfg_file "${PRESEED_FILE}" ansible-server
				kvm::make_vm_now_from_fedora_org fedora30
				cleanup_and_finish nomessage
			;;
		esac
	done
}

clone_vdi_template_vm() {
	# Description:
	#   Lists all existing VMs with names starting with "Template" and containing "VDI" using `virsh`.
	#   Displays them in a dialog menu. When one is selected, clones it, removing the "Template" prefix.
	#
	# Globals:
	#   RTD_GUI, BACKTITLE, HEIGHT, WIDTH, LIST_HEIGHT, DIALOG_CANCEL, DIALOG_ESC
	#
	# Returns:
	#   0 on success, 1 on failure

	local vm_list
	local -a menu_entries
	local template_name selected_name new_name
	local index=1

	if ! command -v virsh >/dev/null || ! command -v "$RTD_GUI" >/dev/null; then
		write_error "❌ Required software not found: may I install it for you?"
		read -ep "Press Enter to continue..."
		software::check_native_package_dependency virsh dialog
		if ! command -v virsh >/dev/null || ! command -v "$RTD_GUI" >/dev/null; then
			write_error "❌ Required commands not found: virsh or dialog wrapper ($RTD_GUI), please install them manually."
			return 1
		fi
		write_information "✅ Required software installed successfully."
		return 1
	fi

	if ! vm_list=$(virsh list --all --name | grep -i '^Template' | grep -i 'VDI'); then
		dialog::display_error "❌ No VDI Virtual Machine Templates found on this system. Please create a template VM first."
		return 1
	fi

	while IFS= read -r template_name; do
		[[ -z "$template_name" ]] && continue
		menu_entries+=("$index" "$template_name")
		((index++))
	done <<< "$vm_list"

	if (( ${#menu_entries[@]} == 0 )); then
		write_error "❌ No Template VDI VMs found to clone"
		return 1
	fi

	while true; do
		exec 3>&1
		selected_index=$("$RTD_GUI" \
			--backtitle "$BACKTITLE" --cancel-button "Back" \
			--title "Clone Template VDI VM" \
			--menu "Select a Template VDI VM to clone:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
			"${menu_entries[@]}" \
			2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case "$exit_status" in
			"$DIALOG_CANCEL"|"$DIALOG_ESC") return 0 ;;
		esac

		template_name="${menu_entries[((selected_index - 1) * 2 + 1)]}"
		new_name="${template_name#Template_}"
		new_name="${new_name%%__*}"
		new_name="${new_name}_$(date +%Y%m%d_%H%M%S)"

		write_status "📀 Cloning VDI VM '$template_name' to '$new_name'..."
		if virsh dominfo "$new_name" &>/dev/null; then
			write_error "⚠️ VM '$new_name' already exists. Choose a different name or remove the existing VM."
			sleep 2
			continue
		fi

		if ! virt-clone --original "$template_name" --name "$new_name" --auto-clone; then
			write_error "❌ Failed to clone VM '$template_name'"
			return 1
		fi

		write_information "✅ VDI VM '$new_name' created successfully from template '$template_name'"
		sleep 2
		return 0
	done
}


manage_vdi_vm_templates() {
	# Description:

	while true; do
		exec 3>&1
		selection=$( $RTD_GUI --backtitle "$BACKTITLE" --cancel-button "Back" --title "Create a Virtual Desktop (VDI) Template"  --menu "Please select which VDI Template to create on this server:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
		"1"  "🐧 Ubuntu Standard Desktop       (more MAC like)" \
		"2"  "🐧 Ubuntu KDE Desktop            (more Windows like)" \
		"3"  "🐧 Ubuntu Xubuntu Desktop        (light weight server VDI)" \
		"4"  "🐧 Ubuntu Mate Desktop           (light weight Server VDI)" \
		"5"  "🐧 Ubuntu Lubuntu Desktop        (light weight Server VDI)" \
		"6"  "🐧 Ubuntu Cinnamon Desktop       (Convenient features)" \
		"7"  "🌀 Debian Default Desktop        (reseal manually)" \
		"8"  "🌀 Debian Cinnamon Desktop       (reseal manually)" \
		"9"  "🌀 Debian Plasma Desktop         (reseal manually)" \
		"10"  "🌀 Debian Light Weight Desktop   (reseal manually)" \
		"11"  "🎩 Fedora Workstation VDI        (reseal manually)" \
		"12"  "🎩 Fedora Plasma (KDE) VDI       (reseal manually)" \
		"13"  "🎩 Fedora Mate Desktop VDI       (reseal manually)" \
		"14"  "🎩 Fedora Cinnamon Desktop VDI   (reseal manually)" \
		"15"  "🎩 Fedora Budgie Desktop VDI     (reseal manually)" \
		"16"  "🎩 Fedora i3 Desktop VDI         (tiling wm)" \
		"17"  "🎩 Fedora Sway Desktop VDI       (tiling wm)" \
		"18"  "🦎 SUSE Default (KDE) VDI        (reseal manually)" \
		"19"  "🦎 SUSE Gnome VDI                (reseal manually)" \
		"20"  "🦎 SUSE XFCE VDI                 (light weight)" \
		"21"  "🦎 SUSE LXDE VDI                 (light weight)" \
		"22"  "🦎 SUSE Mate VDI                 (light weight)" \
		"23"  "🦎 SUSE Cinnamon VDI             (light weight)" \
		"24"  "🪟 Windows 10 VDI                (reseal manually)" \
		"25"  "🪟 Windows 11 VDI                (reseal manually)" \
		"26"  "🐧 Zorin VDI                     (reseal manually)" \
		"27"  "🐉 Kali Security Suite VDI       (Penetration testing etc.)" \
		"28"  "🎩 RedHat Enterprise Linux VDI   (reseal manually)" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return ;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
		0 )
			echo "Program terminated by user..."
		;;
		1 )
			kvm::make_vm_now_from_ubuntu_com --role VDI --server-app ubuntu-desktop --ask YES --tshirt-size medium 
			cleanup_and_finish nomessage
		;;
		2 )
			kvm::make_vm_now_from_ubuntu_com --role VDI --server-app kubuntu-desktop --ask YES --tshirt-size medium 
			cleanup_and_finish nomessage
		;;
		3 )
			kvm::make_vm_now_from_ubuntu_com --role VDI --server-app xubuntu-desktop --ask YES --tshirt-size medium
			cleanup_and_finish nomessage
		;;
		4 )
			kvm::make_vm_now_from_ubuntu_com --role VDI --server-app ubuntu-mate-desktop --ask YES --tshirt-size medium
			cleanup_and_finish nomessage
		;;
		5 )
			kvm::make_vm_now_from_ubuntu_com --role VDI --server-app lubuntu-desktop --ask YES
			cleanup_and_finish nomessage
		;;
		6 )
			kvm::make_vm_now_from_ubuntu_com --role VDI --server-app cinnamon-desktop-environment --ask YES
			cleanup_and_finish nomessage
		;;
		7 )
			kvm::make_vm_now_from_debian_org --role workstation --DE gnome-desktop --tshirt-size small
			cleanup_and_finish nomessage
		;;
		8 )
			kvm::make_vm_now_from_debian_org --role workstation --DE cinnamon-desktop --tshirt-size small
			cleanup_and_finish nomessage
		;;
		9 )
			kvm::make_vm_now_from_debian_org --role workstation --DE kde-desktop --tshirt-size small
			cleanup_and_finish nomessage
		;;
		10 )
			kvm::make_vm_now_from_debian_org --role workstation --DE lxde-desktop --tshirt-size small
			cleanup_and_finish nomessage
		;;
		11 )
			kvm::make_vm_now_from_fedora_org --role workstation --DE "@workstation-product-environment" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		12 )
			kvm::make_vm_now_from_fedora_org --role workstation --DE "@kde-desktop-environment" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		13 )
			kvm::make_vm_now_from_fedora_org --role workstation --DE "@mate-desktop-environment" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		14 )
			kvm::make_vm_now_from_fedora_org --role workstation --DE "@cinnamon-desktop-environment" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		15 )
			kvm::make_vm_now_from_fedora_org --role workstation --DE "@budgie-desktop-environment" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		16 )
			kvm::make_vm_now_from_fedora_org --role workstation --DE "@i3-desktop-environment" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		17 )
			kvm::make_vm_now_from_fedora_org --role workstation --DE "@sway-desktop-environment" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		18 )
			kvm::make_vm_now_from_opensuse_org --DE kde --product Tumbleweed --tshirt-size small
			cleanup_and_finish nomessage
		;;
		19 )
			kvm::make_vm_now_from_opensuse_org --DE gnome --product Tumbleweed --tshirt-size small
			cleanup_and_finish nomessage
		;;
		20 )
			kvm::make_vm_now_from_opensuse_org --DE xfce --product Tumbleweed --tshirt-size small
			cleanup_and_finish nomessage
		;;
		21 )
			kvm::make_vm_now_from_opensuse_org --DE lxde --product Tumbleweed --tshirt-size small
			cleanup_and_finish nomessage
		;;
		22 )
			kvm::make_vm_now_from_opensuse_org --DE mate --product Tumbleweed --tshirt-size small
			cleanup_and_finish nomessage
		;;
		23 )
			kvm::make_vm_now_from_opensuse_org --DE cinnamon --product Tumbleweed --tshirt-size small
			cleanup_and_finish nomessage
		;;
		24 )
			kvm::make_vm_now_from_microsoft --winver win10 --tshirt-size medium
		;;
		25 )
			kvm::make_vm_now_from_microsoft --winver win11 --tshirt-size medium
		;;
		26 )
			kvm::make_vm_now_from_zorin --role desktop --flavor ubuntu --DE gnome-desktop --tshirt-size small
		;;
		27 )
			kvm::make_vm_now_from_kali_org --role workstation --DE standard --tshirt-size medium
			cleanup_and_finish nomessage
		;;
		28 )
			kvm::make_vm_now_from_redhat_com --role workstation --DE "@gnome" --tshirt-size small
			cleanup_and_finish nomessage
		;;
		esac 

	done
}

show_settings_menu() {

# Under construction
echo "Settings Menu"

}

show_manage_VM_template_menu() {
	while true; do
		exec 3>&1
		selection=$( $RTD_GUI --backtitle "$BACKTITLE" --cancel-button "Back" --title "Manage VM Templates"  --menu "Please select which VM Template to manage:" "$HEIGHT" "$WIDTH" "$LIST_HEIGHT" \
		"1" "🔧 Manage Server VM Templates" \
		"2" "🔧 Manage Virtual Desktop VM Templates" \
		2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			"$DIALOG_CANCEL") return ;;
			"$DIALOG_ESC") return ;;
		esac

		case $selection in
			0 )
				clear
				write_information "Program terminated by user..."
			;;
			1 )
				manage_server_vm_templates
			;;
			2 )
				manage_vdi_vm_templates
			;;
		esac
	done
}

vmtool::show_main_menu() {
	while true; do
		exec 3>&1
		selection=$( $RTD_GUI --backtitle "$BACKTITLE" --cancel-button "EXIT" --title "$_TLA VM Tool" --menu "" $HEIGHT $WIDTH $LIST_HEIGHT \
			"1" "🔧 Manage Server VM's" \
			"2" "🔧 Manage Virtual Desktop VM's" \
			"3" "🔧 Manage VM Templates" \
			"4" "🆙 Settings"\
			"5" "❓ About this tool" \
			2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			$DIALOG_CANCEL)
				clear
				echo "Program terminated."
				exit 0
			;;
			$DIALOG_ESC)
				clear
				echo "Program aborted." >&2
				exit 0
			;;
		esac

		case $selection in
			0 ) echo "Program Quit."
			;;
			1 ) clone_server_template_vm
			;;
			2 ) clone_vdi_template_vm
			;;
			3 ) show_manage_VM_template_menu
			;;
			4 ) show_settings_menu
			;;
			5 ) display_notice
			;;
		esac
	done
}




#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Main Init                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Below is the logic for starting this script. As this script pretty much exclusively uses
# functions and function calls for everything it is simple to control the flow of execution here.
# We must ensure that the script is run at the proper privileges and in a
# re-attachable session. This means that this script will not allow itself to be run in
# a root terminal or using the sudo command. The reason for this is that, in order to start in
# a detachable terminal session "byobu", it may not be launched by root. The script will
# need to be run as a normal administrative user with access to "sudo" a.k.a. a member of the
# "sudoers" security group. This helps adhere to the best practice of NOT using a root interactive
# terminal.


main "$@"
