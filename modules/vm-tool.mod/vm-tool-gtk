#!/bin/bash
#:: S I M P L E S Y S T E M S U P P O R T T O O L
RTD_Version=0.1
: ${GIT_Profile:=vonschutter}

: ${_SCRIPTNAME=$(basename $0)}
: ${_TLA=${_SCRIPTNAME:0:3}}
: ${BRANDING_ORG:="RTD"}
: ${BRANDING:="VM Tool"}
: ${HEIGHT:="400"}
: ${WIDTH:="600"}
: ${ZHEIGHT="700"}
: ${ZWIDTH="1024"}
: ${LIST_HEIGHT:="12"}

: ${YELLOW:="\033[1;33m"}
: ${RED:="\033[1;31m"}
: ${ENDCOLOR:="\033[0m"}
: ${GREEN:="\033[1;32m"}
: ${BLUE:="\033[1;34m"}

: ${LOGDIR:="/var/log/rtd"}
LOGFILE="${LOGDIR}/$( basename $0 ).log"

_ERRLOGFILE="${LOGFILE}"
_LOGFILE="${LOGFILE}"

BRAND="üíª $BRANDING Managing: $HOSTNAME Version: $RTD_Version"
BRANDING="$BRAND"
NOTICE="
This tool is part of the RTD System Support Tools.
The purpose of this tool is to simplify management of remote and local Linux systems.

This script simplifies:
- Basic Virtual Machine management
- Auto Create and deploy VMs (Linux and Windows)
- Change password, and encryption phrases of system disk
- Perform distribution upgrades (supported distributions)
- Remove unused PPA's (where relevant)
- Display system information and resource usage

To use this tool simply execute it: $( basename $0 )
This tool is useful for support staff that do not live on the command line daily and
can be used over ssh. If you do get disconnected the tool will remain active remotely
and you can easily reconnect to it by re-establishing your ssh connection and typing
the word: byobu in the terminal."



dependency::file ()
{
	local _src_url="https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/core/${1}"
	local _tgt="${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Requested dependency file: ${1} ..."

		for i in "./${1}" "../core/${1}" "../../core/${1}" "${0%/*}/../core/${1}" "${0%/*}/../../core/${1}" "$(find /opt -name ${1} |grep -v bakup )" ; do 
			echo "${FUNCNAME[0]}: Searching for ${i} ..."
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}"
				source "${i}" ""
				return 0
			fi
		done
		return 1
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		echo "$(date) failure to find $1 on the local comuter, now searching online..."
		if curl -sL $_src_url | source /dev/stdin ; then 
			echo "${FUNCNAME[0]} Using: ${_src_url} directly from URL..."
		elif wget ${_src_url} &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url} downloaded..."
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 
}



display_notice () {
	yad --width=$ZWIDTH --height=$ZHEIGHT --center --title "About $( basename $0 )" --text "$NOTICE" --button=OK
	clear
}

show_deploy_server_VM_now_menu () {
	while true; do
		selection=$( yad --width=$ZWIDTH --height=$ZHEIGHT --center --title "Create Template VM Server" \
		--list --column "Option" --column "Description" \
		--separator='|' \
		"1" "Ubuntu Server" \
		"2" "Ubuntu Graphical Server" \
		"3" "Debian Print Server" \
		"4" "Debian Minimal Server" \
		"5" "Minecraft Server" \
		"6" "Fedora Minimal Server" \
		"7" "Ansible Server" )

		# Exit if the user cancels the selection
		[ $? -ne 0 ] && return

		selection=$(echo $selection | cut -d '|' -f 1)  # Extract the Option number

		case $selection in
			"1" )
				kvm::make_vm_template_now_from_ubuntu_com --role server --flavor ubuntu-server --server_role openssh-server
				cleanup_and_finish nomessage
			;;
			"2" )
				kvm::make_vm_template_now_from_ubuntu_com --role server --flavor ubuntu-server --server_role xubuntu-core
				cleanup_and_finish nomessage
			;;
			"3" )
				kvm::make_vm_template_now_from_debian_org --role server --server_role print-server
				cleanup_and_finish nomessage
			;;
			"4" )
				kvm::make_vm_template_now_from_debian_org --role server --server_role openssh-server
				cleanup_and_finish nomessage
			;;
			"5" )
				kvm::make_vm_template_now_from_ubuntu_com --role server --server_role minecraft-server --tshirt-size medium
				cleanup_and_finish nomessage
			;;
			"6" )
				PRESEED_FILE="$(mktemp)"
				generate_fedora_ks_cfg_file "${PRESEED_FILE}" ssh-server
				make_kvm_virtual_machine_now_from_fedora_org fedora30
				cleanup_and_finish nomessage
			;;
			"7" )
				PRESEED_FILE="$(mktemp)"
				generate_fedora_ks_cfg_file "${PRESEED_FILE}" ansible-server
				make_kvm_virtual_machine_now_from_fedora_org fedora30
				cleanup_and_finish nomessage
			;;
			* )
				return
			;;
		esac
	done
}



show_deploy_VDI_VM_now_menu () {
	while true; do
		selection=$( yad --width=$ZWIDTH --height=$ZHEIGHT --center --title "Create a Virtual Desktop (VDI) Template" \
		--list --column "Option" --column "Description" \
		--separator='|' \
		"1" "Ubuntu Standard Desktop (more MAC like)" \
		"2" "Ubuntu KDE Desktop (more Windows like)" \
		"3" "Debian Default Desktop (reseal manually)" \
		"4" "Debian Cinnamon Desktop (reseal manually)" \
		"5" "Debian Plasma Desktop (reseal manually)" \
		"6" "Debian Light Weight Desktop (reseal manually)" \
		"7" "Fedora Workstation VDI (reseal manually)" \
		"8" "SUSE Workstation VDI (reseal manually)" \
		"9" "Windows 10 VDI (reseal manually)" \
		"10" "Windows 11 VDI (reseal manually)" )

		# Exit if the user cancels the selection
		[ $? -ne 0 ] && return

		selection=$(echo $selection | cut -d '|' -f 1)  # Extract the Option number

		case $selection in
			"1" )
				kvm::make_vm_template_now_from_ubuntu_com --role desktop --flavor ubuntu-desktop --desktop_environment ubuntu-desktop --ask YES --tshirt-size medium
				cleanup_and_finish nomessage
			;;
			"2" )
				kvm::make_vm_template_now_from_ubuntu_com --role desktop --flavor kubuntu-desktop --desktop_environment kubuntu-desktop
				cleanup_and_finish nomessage
			;;
			"3" )
				kvm::make_vm_template_now_from_debian_org --role workstation --DE gnome-desktop --tshirt-size small
				cleanup_and_finish nomessage
			;;
			"4" )
				kvm::make_vm_template_now_from_debian_org --role workstation --DE cinnamon-desktop --tshirt-size small
				cleanup_and_finish nomessage
			;;
			"5" )
				kvm::make_vm_template_now_from_debian_org --role workstation --DE kde-desktop --tshirt-size small
				cleanup_and_finish nomessage
			;;
			"6" )
				kvm::make_vm_template_now_from_debian_org --role workstation --DE lxde-desktop --tshirt-size small
				cleanup_and_finish nomessage
			;;
			"7" )
				make_kvm_virtual_machine_now_from_fedora_org --role workstation --DE "@workstation-product-environment" --tshirt-size small
				cleanup_and_finish nomessage
			;;
			"8" )
				make_kvm_virtual_machine_now_from_opensuse_org --DE kde --product Leap --tshirt-size small
				cleanup_and_finish nomessage
			;;
			"9" )
				kvm::make_vm_template_now_from_microsoft --winver win10 --tshirt-size medium
			;;
			"10" )
				kvm::make_vm_template_now_from_microsoft --winver win11 --tshirt-size medium
			;;
			* )
				return
			;;
		esac
	done
}





show_main_menu () {
	while true; do
		selection=$( yad --width=$ZWIDTH --height=$ZHEIGHT --center --title "$_TLA VM Tool" \
		--list --column "Option" --column "Description" \
		--separator='|' \
		"1" "üîß Manage Server VM's" \
		"2" "üîß Manage Virtual Desktop VM's" \
		"3" "üÜô Settings" \
		"4" "‚ùì About this tool" )

		# Exit if the user cancels the selection
		[ $? -ne 0 ] && break

		selection=$(echo $selection | cut -d '|' -f 1)  # Extract the Option number

		case $selection in
			"1" ) show_deploy_server_VM_now_menu ;;
			"2" ) show_deploy_VDI_VM_now_menu ;;
			"3" ) show_settings_menu ;;
			"4" ) display_notice ;;
			* )
				clear
				echo "Program terminated."
				exit 0
			;;
		esac
	done
	clear
}

if [[ -z "$BASH_VERSINFO" ]]; then
	echo "ERROR: You must execute this script in a BASH Shell"
	exit 255
fi

if dependency::file _rtd_library ; then 
	{ echo "Library found and loaded..." ; }
else
	{ echo "Library not found!" ; exit 1 ; }
fi


case $1 in
	about | --about | --help | -h )
		display_notice
		exit
	;;
	* )
		ensure_admin
		show_main_menu
	;;
esac
