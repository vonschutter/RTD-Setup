#!/usr/bin/env bash

# File: security-utilities-menu.sh
# Description:
#   Dialog-driven menu to execute various security hardening and configuration
#   functions defined in the RTD _rtd_library.
#
# Requirements:
#   - _rtd_library must exist and be sourceable
#   - dialog must be installed
#
# End of documentation


export RTD_GUI="dialog"

dependency::file ()
{
	local _src_url="https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/core/${1}"
	local _tgt="${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Requested dependency file: ${1} ..."

		for i in "./${1}" "../core/${1}" "../../core/${1}" "${0%/*}/../core/${1}" "${0%/*}/../../core/${1}" "$(find /opt -name ${1} |grep -v bakup )" ; do 
			echo "${FUNCNAME[0]}: Searching for ${i} ..."
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}"
				source "${i}" ""
				return 0
			fi
		done
		return 1
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		echo "$(date) failure to find $1 on the local comuter, now searching online..."
		if curl -sL $_src_url | source /dev/stdin ; then 
			echo "${FUNCNAME[0]} Using: ${_src_url} directly from URL..."
		elif wget ${_src_url} &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url} downloaded..."
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 
}


if ! command -v dialog >/dev/null 2>&1; then
	printf "⛔ ERROR: 'dialog' is required but not installed.\n" >&2
	exit 1
fi

security_menu() {
	while true; do
		exec 3>&1
		selection=$(dialog --clear --backtitle "RTD SECURITY UTILITIES" \
			--title "🔐 Security Tools Menu" \
			--cancel-label "Exit" \
			--menu "Choose a security task to execute:" 20 80 14 \
			1 "Enable Firewall (UFW/firewalld)" \
			2 "Check if Password is Pwned" \
			3 "Run ClamAV Scan" \
			4 "Change Encrypted Disk Passphrase" \
			5 "Ubuntu System Hardening" \
			6 "Configure ClamAV" \
			7 "Configure Fail2Ban" \
			8 "Configure RKHunter" \
			9 "Configure auditd" \
			10 "Apply Sysctl Hardening" \
			11 "Set Secure Password Policy" \
			12 "Install AIDE" \
			2>&1 1>&3)
		exit_status=$?
		exec 3>&-
		clear

		case $exit_status in
			1|255) break ;;
		esac

		case "$selection" in
			1)
				security::enable_firewall
				;;
			2)
				security::check_if_password_pOwned
				;;
			3)
				dir=$(dialog --stdout --title "ClamAV Scan" --dselect "$HOME/" 10 70)
				[[ -n "$dir" ]] && security::scan_for_malware "$dir"
				;;
			4)
				security::change_disk_pass
				;;
			5)
				security::harden_ubuntu
				;;
			6)
				security::configure_clamav
				;;
			7)
				security::configure_fail2ban
				;;
			8)
				security::configure_rkhunter
				;;
			9)
				security::configure_auditd
				;;
			10)
				security::sysctl_hardening
				;;
			11)
				security::secure_password_policy
				;;
			12)
				security::install_AIDE
				;;
		esac
	done
}

main() {
	#trap "clear" EXIT
	dependency::file _rtd_library
	security_menu
}

main "$@"
