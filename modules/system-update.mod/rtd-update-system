#!/bin/bash
#::                                      A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Compression Tool //::::::::::::::::::::::::::::::::::// Linux //::::::::
#::
#:: 	Author:   	SLS
:	${PUBLICATION:="RuntimeData Update Manager for Linux"}
:	${VERSION:="1.13"}
:	${GIT_Profile:=vonschutter}
#::
#::
#::	Purpose: The purpose of this script is to update installed software from distribution reopositories.
#::		 Software update script for SUSE, Debian, RedHat based systems...
#::
#::	Usage:	Simply execute this script to accomplish this task. No parameters required.
#::
#::	Change Log:
#::		- 2006.06.15: File originally created
#::		- 2015.10.15: Expanded to support multiple distros
#::		- 2018.05.10: Expanded to support Flatpak and Snaps
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Variables that govern the behavior or the script and location of files are

# Set colors for prompting on screen.
	YELLOW="\033[1;33m"
	RED="\033[1;31m"
	ENDCOLOR="\033[0m"
	GREEN="\033[1;32m"
	BLUE="\033[1;34m"
# Put a convenient link to the logs where logs are normally found...
# capture the 3 first letters as org TLA (Three Letter Acronym)
export _SCRIPTNAME=$(basename $0)
export _TLA=${_SCRIPTNAME:0:3}
export _LOG_DIR=/var/log/${_TLA}
mkdir -p ${_LOG_DIR}

# Determine log file names for this session
export _LOGFILE=${_LOG_DIR}/${_SCRIPTNAME}.log

# Ensure administrative privileges.
[ "$UID" -eq 0 ] && echo -e "Administrative Access OK" $ENDCOLOR || echo -e $YELLOW"This script needs administrative access..." $ENDCOLOR
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Identify
# clear
echo -e $GREEN"$PUBLICATION: Version $VERSION" $ENDCOLOR
echo -e $GREEN"--------------------------------------------------------" $ENDCOLOR

echo This tool makes it simple to update software from all channels
echo available on the system at once. It will update via the native
echo -e "package manager as well as newer formats like $YELLOW"snap"$ENDCOLOR and $YELLOW"flatpak"$ENDCOLOR..."
echo " "
echo This update script supports the following instructions:
echo " "
echo -e " - $YELLOW"Default"$ENDCOLOR : Just running this script will update via all configured channels."
echo -e " - $YELLOW"update"$ENDCOLOR :  Parameter "update" will update the updater to the latest version. "
echo -e " - $YELLOW"setup"$ENDCOLOR :   Parameter "setup" make sure that you are using all software channels "
echo -e "      "
echo " "

if [ "$1" == "update" ]; then
       	INSTRUCTION=update_me
fi

if [ "$1" == "config" ]; then
       	INSTRUCTION=config_me
fi

if [ "$1" == "setup" ]; then
       	INSTRUCTION=setup_me
fi




#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

check_rtd_library ()
{
	_src_url=https://github.com/${_GIT_PROFILE}/RTD-Setup/raw/main/core/_rtd_library

	if source "$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library ; then
		# Library found in relative path...
		write_information "${FUNCNAME[0]} 1 Using:  $( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library
	elif source $(find /opt -name _rtd_library |grep -v bakup ) ; then
		# Library not found in relative path: search the typical location...
		write_information "${FUNCNAME[0]} 2 Using: $(find /opt -name _rtd_library |grep -v bakup )"
	elif wget ${_src_url} ; then
		# Critical failure: downloaded copy from github.com
		source ./_rtd_library
	else
		# Abot condition: No mitigation steps worked.
		echo -e "RTD functions NOT loaded!"
		echo -e " "
		echo -e "Cannot ensure that the correct functionality is available"
		echo -e "Quiting rather than cause potential damage..."
		exit 1
	fi

	write_host --cyan "Libraries loaded"
	write_status "Paths registered:
	- Root directory of tools: 		_OEM_DIR="${scriptdir%/*}"
	- Caching and download folder: 		_CACHE_DIR="${_OEM_DIR}/cache"
	- Location of 3rd party apps:		_APP_DIR="${_OEM_DIR}/apps"
	- Location of extension modules:	_MODS_DIR="${_OEM_DIR}/modules"
	- Root tools folder: 			_CORE_DIR="${_OEM_DIR}/core"
	- Location of log files:		_LOG_DIR=/var/log/${_TLA,,}
	"
}




log_item ()
{
DATE=$(date '+%d/%m/%Y %H:%M:%S');
echo "$DATE --- : $@" >> ${_LOGFILE}.log
}



update_me ()
{
	if [[ -w $0 ]] ; then
		rm $0.bak
		mv $0 $0.bak
		wget  --show-progress https://github.com/vonschutter/RTD-Setup/raw/main/modules/System_Update.mod/${0##*/} -P $0
		chmod +x $0
		if [[ -e $0 ]]; then
			return  0
		else
			cp $0.bak $0
			echo "Update failed: rolled back!"
			return 1
		fi
	fi
}



config_me ()
{
	write_error "::There is nothing to configure at this time!::"
}



setup_me ()
{
	check_dependencies flatpak
	flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	check_dependencies  snapd
}

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Executive                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

check_rtd_library

# Execute the fist instruction passed to this script...
if [ ! -z $INSTRUCTION ]; then
	log_item The instruction $INSTRUCTION was given...
	$INSTRUCTION
	exit
else
	log_item No instructions passed to $0... Continuing with default behavior.
fi

write_status "Updating installed software..."

# Updating software managed by distribution speciffic software manager...
# Unless the RTD Functions are loaded, then use that.

if [[ "$1" == "--noui" ]] ; then
	rtd_update_system
else 
	software::update_all_ui
fi