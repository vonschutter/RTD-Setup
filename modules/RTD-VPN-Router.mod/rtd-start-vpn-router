#!/bin/bash
#
#::                                    VPN Server Firewall configuration script
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:: Author:   	Stephan S. (Sweden)
#:: Verssion 1.06
#::
#::	Monday 27 November, 2017  - Stephan S.
#::		* File originally created.
#::		* Added setup actions to auto login and auto start router on reboot
#::
#::	Purpose: The purpose of the script is to setup iptables (Fire Wall) so that it will forward all traffic through
#:: 		 a vpn (tun0) and block all traffic if the VPN is down for any reason. This will ensure that
#:: 		 traffic is not accidentally exposed to evil authorities.
#::              - Local interface is "ens3"
#::              - VPN tunnel interface is "tun0"
#:: 		If either of these are different on your system you must change these in the script.
#::		The script will, however, try to identify the primary local newtork interface.
#::
#:: You may for exaple deploy a Debian based VM, and install your preferred VPN, run this script,
#:: and then configure your client devices to (via DHCP) route all traffic through the VM's IP address.
#:: This will ensure that all traffic from your LAN to the internet is anonymized, and that traffic is blocked if not.
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

_LOCALINT=
_VPNINT="tun0"
_LOCALNET="192.168.1.0"
_LOCALSUB="24"
_HOMEDIR="$HOME"

NORDVPN_DEB="https://repo.nordvpn.com/deb/nordvpn/debian/pool/main/nordvpn-release_1.0.0_all.deb"
NORDVPN_RPM="https://repo.nordvpn.com/yum/nordvpn/centos/noarch/Packages/n/nordvpn-release-1.0.0-1.noarch.rpm"

[ "$UID" -eq 0 ] || echo "This script needs administrative access..."
[ "$UID" -eq 0 ] || exec sudo -H bash "$0" "$@"



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Setup routing for VPN           ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

find_active_newtork_interface (){
	NETINT=$(ip addr | awk '/state UP/ {print $2}' |grep -v "br*" |grep -v "wlp*" | head --bytes -2 )
	echo "Active network interface is: $NETINT"
	"${_LOCALINT:-$NETINT}"
}

find_active_bridge_interface () {
	# Discover if the appropriate VM net interface is (default or br'0 - n')
	VIRT_NET="$(if ls /sys/class/net |grep br |grep -v virbr >/dev/null; then echo "bridge:$(ls /sys/class/net)" |grep tun ; else echo default;fi)"
	"${_VPNINT:-$VIRT_NET}"
}


rtd_oem_setup_autologin () {

	mkdir -p /etc/systemd/system/getty@tty1.service.d

	if [ ! -f /etc/systemd/system/getty@tty1.service.d/override.conf ]; then
		echo "***********  Updating Autologin information... ************ "
		echo "[Service]" > /etc/systemd/system/getty@tty1.service.d/override.conf
		echo "ExecStart=" >> /etc/systemd/system/getty@tty1.service.d/override.conf
		echo "ExecStart=-/sbin/agetty --noissue --autologin $SUDO_USER %I $TERM" >> /etc/systemd/system/getty@tty1.service.d/override.conf
		echo "Type=idle" >> /etc/systemd/system/getty@tty1.service.d/override.conf
	else
		echo "/etc/systemd/system/getty@tty1.service.d/override.conf is already present... "
	fi


	if [ ! $(cat $SUDO_USER/.bashrc |grep rtd-start-vpn-router)  ]; then
		echo "**********    Seting up vpn router to start automatically   ************* "
		echo "if [ -f ~/bin/rtd-start-vpn-router ]; then" >>$SUDO_USER/.bashrc
		echo "bash ~/bin/rtd-start-vpn-router" $SUDO_USER/.bashrc
		echo "fi"  >> $SUDO_USER/.bashrc
	else
		echo "$SUDO_USER/.bashrc already updated... "
	fi
}




check_dependencies () {
	#---------------------------------------------------------------
	echo "Checking for script dependencies and install if not there..."
	#---------------------------------------------------------------
	if hash $1 2>/dev/null; then
		echo "I found that $1 is present on this system... thankyou for that! "
	else
		echo "You seem to have no $1... I will try to get it... "
		install_software $1
		if [ $? != 0 ];
		then
			echo "That install didn't work out so well."
			echo "Please manually try to add the software since I couldn't do it."
			exit
		fi
		echo "OK Done! Continuing..."
	fi
}



rtd_oem_setup_auth_launch_vpn () {
	# Add instruction to a sudoers include file:
	# This should be removed when OEM setup is complete as it would represent a back door...
	# if [ ! /etc/sudoers.d/99_sudo_include_file ]; then
		echo "$SUDO_USER ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/99_sudo_include_file

		# Check that your sudoers include file passed the visudo syntax checks:
		sudo visudo -cf /etc/sudoers.d/99_sudo_include_file
	# else
	# 	echo "/etc/sudoers.d/99_sudo_include_file already updated..."
	# fi
}



setup_routing_for_vpn () {
	echo #---------------------------------------------------------------
	echo "Checking for iptables and install if not there..."
	echo #---------------------------------------------------------------
	check_dependencies iptables

	echo #---------------------------------------------------------------
	echo "Removing old rules and tables..."
	echo #---------------------------------------------------------------
	iptables -F
	iptables -X
	iptables -t nat -F
	iptables -t nat -X
	iptables -t mangle -F
	iptables -t mangle -X


	echo #---------------------------------------------------------------
	echo "Default Policy - Drop everything!"
	echo #---------------------------------------------------------------
	iptables -P INPUT DROP
	iptables -P FORWARD DROP
	iptables -P OUTPUT DROP

	echo #---------------------------------------------------------------
	echo "Allow all local connections."
	echo #---------------------------------------------------------------
	iptables -A INPUT  -i lo  -j ACCEPT
	iptables -A OUTPUT -o lo  -j ACCEPT
	iptables -A INPUT  -i $_LOCALINT  -j ACCEPT
	iptables -A OUTPUT -o $_LOCALINT  -j ACCEPT
	# Allow traffic on the TUN interface.
	iptables -A INPUT -i $_VPNINT -j ACCEPT
	iptables -A FORWARD -i $_VPNINT -j ACCEPT
	iptables -A OUTPUT -o $_VPNINT -j ACCEPT


	#---------------------------------------------------------------
	echo "Forward all traffic to this host through the vpn."
	#---------------------------------------------------------------
	sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
	iptables -A FORWARD -o $_VPNINT -i $_LOCALINT -s $_LOCALNET/$_LOCALSUB -m conntrack --ctstate NEW -j ACCEPT
	iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
	iptables -A POSTROUTING -t nat  -j MASQUERADE
	iptables-save | sudo tee /etc/iptables.sav
}



start_vpn_nat_monitor () {

	# Check that the required packages are installed and add them if not.
	check_dependencies byobu
	check_dependencies speedometer

	byobu new-session -d -s $USER

	# status screen
	byobu rename-window -t $USER:0 'status'
	byobu send-keys "htop" C-m

	byobu split-window -v
	byobu-tmux select-pane -t 1
	byobu send-keys "$@" C-m

	# netmon
	#byobu-tmux select-pane -t 2
	byobu split-window -h
	byobu send-keys "speedometer -r tun0 -t tun0" C-m

	# Select first window 0 and split horizontally
	byobu-tmux select-pane -t 0
	byobu split-window -h
	byobu send-keys "cat  /home/$SUDO_USER/bin/FW_README" C-m

	# Create new window
	byobu new-window -t $USER:1 -n 'CMD'

	# Set default window as the dev split plane
	byobu select-window -t $USER:0

	# Attach to the session you just created
	byobu attach-session -t $USER

}



run_nordvpn() {
	if hash nordvpn 2>/dev/null; then
		nordvpn connect

	else
		if ($rtd_menu --title "$_branding helper: Get VPN" --yesno "Nordvpn is not installed... I need to download it from the internet. Is this OK?" 8 78); then
			echo "OK Thank you. Geting Nordvpn from the website..."
			if hash rpm 2>/dev/null; then
				sudo rpm -ivh $NORDVPN_RPM || sudo yum update -y
				sudo yum install nordvpn && nordvpn connect || err_nordvpn_install
			elif hash apt 2>/dev/null; then
				sudo wget -q $NORDVPN_DEB && sudo dpkg -i ./nordvpn-release_1.0.0_all.deb && sudo rm ./nordvpn-release_1.0.0_all.deb
				sudo apt -f install
				sudo apt update
				sudo apt -y install nordvpn
				sudo apt -f install && nordvpn connect || err_nordvpn_install
			else
				err_nordvpn_install
			fi
		else
			$rtd_menu --title "$_branding helper: Get VPN" --msgbox "Nordvpn was not installed... Without the VPN software I cannot continue. My appologies, but I must exit." 8 78
			_cleanup
			exit
		fi

	fi
}



_cleanup () {
	_branding=
}



err_nordvpn_install () {
	$rtd_menu --title "$_branding helper: PROBLEM" --msgbox "	I was not able to install Nordvn for you. Please do it manually and try again" 0 110
	_cleanup
	exit 1
}



err_no_menu_system_available () {
	echo "There is no menu or dialog software installed on this system..."
	echo "If you want to use $me you must ensure that whiptail or dialog is installed."
	read -p Press [ENTER] to exit...
	_cleanup
	exit 1
}



check_menu_availability () {
	# First discover what menu system is installed. Some systems use "dialog" and
	# other systems use whiptail for the terminal to show menus and dialogs.
	# If nothing is found, then make sure it is available before continuing.
	if hash whiptail >/dev/null ; then
		export rtd_menu=whiptail
	elif hash dialog >/dev/null ; then
		export rtd_menu=dialog
	else
		err_no_menu_system_found
	fi

}



err_no_menu_system_found () {
	echo -e "$RED There is no way to display menus on this system $ENDCOLOR"
	echo -e "This is required to display the choices of countries..."
	echo -e "$YELLOW May I attepmpt to install this ability to your system? $ENDCOLOR"
	read -p "Add software: (y/n)?" choice
	case "$choice" in
	  y|Y ) install_software whiptail ;;
	  n|N ) err_no_menu_system_available ;;
	  * ) echo "Invalid Selection" && err_no_menu_system_found ;;
	esac
}



install_software () {
	if hash pkcon 2>/dev/null; then
		sudo pkcon -y  install "$@"
	elif hash yum 2>/dev/null; then
		sudo yum -y  install "$@"
	elif hash zypper 2>/dev/null; then
		sudo zypper install -y "$@"
	elif hash apt-get 2>/dev/null; then
		export DEBIAN_FRONTEND=noninteractive
		sudo apt-get -y -qq --allow-change-held-packages --ignore-missing install "$@"
	else
		echo -e $YELLOW "This system does not seem to have a software managment system" $ENDCOLOR
		err_no_menu_system_available
		_cleanup
		exit 1
	fi
}



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Connect VPN                     ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# This particular version of this script requires HMA Vpn. HMA is just a script
# in the case of linux, but you need an account with HMA for this to work.
# To automate the connection you may save your VPN credentials in a file
# or use PAM if you really know your stuff... ensure that the file is only
# readable by you or root, lest someone else use your VPN for bad things.


pushd "/home/$SUDO_USER" || echo "Failed to enter /home/$SUDO_USER "
find_active_newtork_interface
find_active_bridge_interface
rtd_oem_setup_autologin
rtd_oem_setup_auth_launch_vpn
check_menu_availability
setup_routing_for_vpn run_nordvpn
