#! /bin/sh
# -*- mode: sh -*-
##!/bin/bash
#
#::                                       A D M I N   T O O L
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::// Simple System Profile  //::::::::::::::::::::::::::::::::::// Linux //::::::::
#:: Author(s):   	Vonschutter
#:: Version 1.00
#::
#::
#::	Purpose: - The purpose of the script is to displey system hardware information. 
#::		   
#::		 
#::		 
#::
#::	Dependencies:
#::	  _rtd_functions -- contain usefull admin functions for scripts, such as "how to install software" on different systems.
#::
#::
#::
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Variables that govern the behavior or the script and location of files are
# set here. There should be no reason to change any of this.

# Decide where to put log files.
# Default: log in to the $_LOG_DIR location dated accordingly. If this is already set
# we use the requested location. These settings are calculated below but you may
# chose to over ride them by uncommenting the variables below:
#
# export _LOG_DIR=
# export _ERRLOGFILE=
# export _LOGFILE=
# export _TLA=






YAD_OPTIONS="--window-icon='dialog-information' --name=IxSysinfo"
KEY=$RANDOM





#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


dependency::file ()
{
	_src_url="https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/core/${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Searching for ${1} ..."

		for i in "./${1}" "${0%/*}/../core/${1}" "${0%/*}/../../core/${1}" "../core/${1}" "../../core/${1}" "$(find /opt -name ${1} |grep -v bakup )" ; do 
			echo "${FUNCNAME[0]}: Searching for ${i} ..."
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}"
				source "${i}" ""
				return 0
			fi
		done	
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		if wget ${_src_url} &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url}"
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 

}




show_mod_info () 
{
	TXT="\\n<span face='Monospace'>$(modinfo $1 | sed 's/&/\&amp;/g;s/</\&lt;/g;s/>/\&gt;/g')</span>"
	yad --title=$"Module information" --button="yad-close" --width=500 \
		--image="application-x-addon" --text="$TXT"
}
export -f show_mod_info


exec::show_UI ()
{
	# CPU tab
	lscpu | sed -r "s/:[ ]*/\n/" |\
	yad --plug=$KEY --tabnum=1 --image=cpu --text=$"CPU information" \
		--list --no-selection --column=$"Parameter" --column=$"Value" &

	# Memory tab
	sed -r "s/:[ ]*/\n/" /proc/meminfo |
	yad --plug=$KEY --tabnum=2 --image=memory --text=$"Memory usage information" \
		--list --no-selection --column=$"Parameter" --column=$"Value" &

	# Harddrive tab
	df -T | tail -n +2 | awk '{printf "%s\n%s\n%s\n%s\n%s\n%s\n", $1,$7, $2, $3, $4, $6}' |\
	yad --plug=$KEY --tabnum=3 --image=drive-harddisk --text=$"Disk space usage" \
		--list --no-selection --column=$"Device" --column=$"Mountpoint" --column=$"Type" \
		--column=$"Total:sz" --column=$"Free:sz" --column=$"Usage:bar" &

	# PCI tab
	lspci -vmm | sed 's/\&/\&amp;/g' | grep -E "^(Slot|Class|Vendor|Device|Rev):" | cut -f2 |\
	yad --plug=$KEY --tabnum=4 --text=$"PCI bus devices" \
		--list --no-selection --column=$"ID" --column=$"Class" \
		--column=$"Vendor" --column=$"Device" --column=$"Rev" &

	# Modules tab
	awk '{printf "%s\n%s\n%s\n", $1, $3, $4}' /proc/modules | sed "s/[,-]$//" |\
	yad --plug=$KEY --tabnum=5 --text=$"Loaded kernel modules" \
		--image="application-x-addon" --image-on-top \
		--list --dclick-action='bash -c "show_mod_info %s"' \
		--column=$"Name" --column=$"Used" --column=$"Depends" &

	# Battery tab
	( acpi -i ; acpi -a ) | sed -r "s/:[ ]*/\n/" | yad --plug=$KEY --tabnum=6 \
	--image=battery --text=$"Battery state" --list --no-selection \
	--column=$"Device" --column=$"Details" &

	# Sensors tab
	SENSORS=($(sensors | grep -E '^[^:]+$'))
	sid=1
	cid=1

	for s in ${SENSORS[@]}; do
	echo -e "s$sid\n<b>$s</b>\n"
	sensors -A "$s" | tail -n +2 | while read ln; do
		[[ $ln == "" ]] && continue
		echo "$cid:s$sid"
		echo $ln | sed -r 's/:[ ]+/\n/'
		((cid++))
	done
	((sid++))
	done | yad --plug=$KEY --tabnum=7 --text=$"Temperature sensors information" \
	--list --tree --tree-expanded --no-selection --column=$"Sensor" --column=$"Value" &

	# main dialog
	TXT=$"<b>	$_TLA System Hardware Information</b>\\n\\n"
	TXT+=$"\\tOS: $(lsb_release -ds) on $(hostname)\\n"
	TXT+=$"\\tKernel: $(uname -sr)\\n\\n"
	TXT+="\\t<i>$(uptime)</i>"

	yad --notebook --width=800 --height=600 --title=$"System information" --text="$TXT" --button="Close" \
	--key=$KEY --tab=$"CPU" --tab=$"Memory" --tab=$"Disks" --tab=$"PCI" --tab=$"Modules" \
	--tab=$"Battery" --tab=$"Sensors" --active-tab=${1:-1}

}


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Execute tasks                   ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

dependency::file _rtd_library

if hash yad &>/dev/null ; then 
	exec::show_UI
else 
	write_error "A dependency is missing and must be installed! You may start the script after... "
	check_dependencies yad 
fi

