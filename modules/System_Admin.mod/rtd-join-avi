#!/bin/bash
#
#::             			A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple AVI joiner Tool //:::::::::::::::::::::::::::::::::::// Linux //::::::::
#::
#::     Author:   	SLS
#::     Version 	1.02
:	${GIT_Profile:=vonschutter}
#::
#::
#::	Purpose: The purpose of the script is to join avi files in to one playable movie.
#::
#::
#::     Usage:	Simply execute this commandlet passing the parameter indicating where avi files are located
#:: 		to join them all in one file.
#::
#::     	Example:
#::		rtd-join-avi *.avi
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Additional information:
#
# Audio Video Interleave (also Audio Video Interleaved), known by its initials AVI and the .avi filename extension,
# is a multimedia container format introduced by Microsoft in November 1992 as part of its Video for Windows software.
# AVI files can contain both audio and video data in a file container that allows synchronous audio-with-video playback.
# Like the DVD video format, AVI files support multiple streaming audio and video, although these features are seldom used.

# Many AVI files use the file format extensions developed by the Matrox OpenDML group in February 1996. These files
# are supported by Microsoft, and are unofficially called "AVI 2.0". In 2010 the US government's National Archives and
# Records Administration defined AVI as the official wrapper for preserving digital video.
#
# This  script was originally developed for RuntimeData, a small OEM in Buffalo Center, IA.
# This OEM and store nolonger exists as its owner has passed away.
# This script is shared in the hopes that someone will find it useful.
#
# This script is intended to live in the ~/bin/ or /bin/ folder, alternatively in the $PATH.

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

check_rtd_library ()
{
	_src_url=https://github.com/${_GIT_PROFILE}/RTD-Setup/raw/main/core/_rtd_library

	if source "$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library ; then
		# Library found in relative path...
		write_information "${FUNCNAME[0]} 1 Using:  $( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library
	elif source $(find /opt -name _rtd_library |grep -v bakup ) ; then
		# Library not found in relative path: search the typical location...
		write_information "${FUNCNAME[0]} 2 Using: $(find /opt -name _rtd_library |grep -v bakup )"
	elif wget ${_src_url} ; then
		# Critical failure: downloaded copy from github.com
		source ./_rtd_library
	else
		# Abot condition: No mitigation steps worked.
		echo -e "RTD functions NOT loaded!"
		echo -e " "
		echo -e "Cannot ensure that the correct functionality is available"
		echo -e "Quiting rather than cause potential damage..."
		exit 1
	fi
}



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Executive                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if ! hash mencoder 2>/dev/null; then
	if [[ "$UID" == "0" ]]; then
		check_dependencies mencoder
		exit
	else
		write_error "Software needed to join AVI files is missing. Please run $( basename $0 ) again with sudo so that I may correct the problem."
		exit
	fi
fi

if [[ -z $1 ]]; then
	write_error "You need to provide at least one argument!
	for example: $( basename $0 ) *.avi
	so that I know what files to process! "
	exit
fi



rtd_join_avis () {
        mencoder -oac copy -ovc copy $@ -o WHOLE-THING.avi
}

check_rtd_library
rtd_join_avis

