#!/bin/bash
#
#::                                    A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Admin Tool //::::::::::::::::::::::::::::::::::::::::// Linux //::::::::
#::
#:: Author:   	SLS
#:: Version 	1.02
#::
#::
#::	Purpose: The purpose of this script is to clear out zombie processes.
#::		 This may be useful in troubleshooting. It may work, but depending on the cause
#::		 of the zombification it may or may not work.
#::     Usage:	Simply execute this commandlet to accomplish this task. No parameters required.
#::
#::
#::
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# Additional Information:
#
# On Unix and Unix-like computer operating systems, a zombie process or defunct process is a process that has completed
# execution (via the exit system call) but still has an entry in the process table: it is a process in the "Terminated state".
# This occurs for child processes, where the entry is still needed to allow the parent process to read its child's exit status:
# once the exit status is read via the wait system call, the zombie's entry is removed from the process table and it is said
# to be "reaped". A child process always first becomes a zombie before being removed from the resource table. In most cases,
# under normal system operation zombies are immediately waited on by their parent and then reaped by the system â€“ processes
# that stay zombies for a long time are generally an error and cause a resource leak.
#
# This  script was originally developed for RuntimeData, a small OEM in Buffalo Center, IA.
# This OEM and store nolonger exists as its owner has passed away.
# This script is shared in the hopes that someone will find it useful.
#
# This script is intended to live in the ~/bin/ or /bin/ folder, alternatively in the $PATH.


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

check_rtd_library ()
{
        # Set library path if not defined:
        scriptdir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        rtd_library=${rtd_library:-"${scriptdir}/../../core/_rtd_library"}

        if [[ -f ${rtd_library} ]]; then
                source ${rtd_library}
        elif [[ ! -f ${rtd_library} ]]; then
                echo "RTD Functions not found... "
                echo "Trying to retrieve them..."
                wget https://github.com/vonschutter/RTD-Build/raw/master/System_Setup/_rtd_library
                source ./_rtd_library
        else
                exit 1
        fi
}

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Executive                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Ensure access to the rtd library functions:
check_rtd_library
# Ensure elevated privs:
ensure_admin

result=$(kill $(ps -A -ostat,ppid | awk '/[zZ]/{print $2}'))
if [[ -z ${result} ]] ; then result="No zombie processes were found on this system." ; fi
display_result "$( basename $0 )"
