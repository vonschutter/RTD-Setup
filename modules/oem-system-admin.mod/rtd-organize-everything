#!/bin/bash
#				-	RTD Power Toy Script      -
#
#::::::::::::::::::::::::::::::::::::::::::::: HEADER DO NOT REMOVE :::::::::::::::::::::::::::::::::::::::::::::::::::::
:<<"::CMDLITERAL"
cls
@ECHO "Do not attempt to run this script in PowerShell"
exit /b 1
::CMDLITERAL

#::
#::
#::
#::                                      A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Organization Toy //::::::::::::::::::::::::::::::::::// Linux //::::::::
#::
#:: 	Author:   	SLS
#:: 	Version 	1.00
#::
#::
#::	Purpose: To organize all the files found in the current folder by extension.
#::		 The current folder refers to the present working directory "PWD".
#::
#::	Usage:	Simply execute this script to accomplish this task. No parameters required.
#::
#::
#::
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# This script is shared in the hopes that someone will find it useful.
#
# This script iterates over all files in the current directory, extracts their extensions, creates a directory for each 
# unique extension (if it doesn't already exist), and then copies the files into the corresponding directory 
# based on their extension.
#
#     for f in *.*; iterates over all files in the current directory that have an extension.
#     do d="${f##*.}"; extracts the file extension and assigns it to variable d. This effectively isolates the extension 
#     from the filename. mkdir -p "$d" creates a directory named after the file extension if it doesn't already exist. 
#     The -p flag ensures that mkdir does not throw an error if the directory already exists.
#     && mv "$f" "$d"; moves the file into the newly created directory. "done" marks the end of the loop.
#
# This assumes that files are named in a conventional manner with a single dot before the file extension (e.g., file.txt). 
# It will not correctly handle files with multiple dots in their names (e.g., archive.tar.gz) or files without extensions.


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Variables that govern the behavior or the script and location of files are
# set here. There should be no reason to change any of this absent strong preferences.

Color_Off='\033[0m'       # Text Reset
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

help_text="
$Red Organize Everything: $Color_Off
This script organizes all files in the current directory by extension.
It creates a directory for each unique extension and moves the files into the corresponding directory.
The script assumes that files are named in a conventional manner with a single dot before the file extension.
It will not correctly handle files with multiple dots in their names or files without extensions. 
To run the script, execute it in the directory you want to organize with no parameters.

$Green Usage: $Color_Off
$Cyan $( basename ${0} ) $Color_Off
"

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Execute tasks                   ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


if [[ $1 == "--help" || $1 == "-h" ]]; then
        echo -e "$help_text"
        exit 0
fi

if command -v dialog &> /dev/null; then
        dialog --clear --title "Organize Everything in This Folder" --yesno "\n This script will organize all files in the current directory by extension. \n \n OK to continue?" 12 80
        response=$?
        clear
        case $response in
                0 ) # Yes
                        if [[ -z "$(find . -maxdepth 1 -type f -not -name ".*" -printf "%f\n" )" ]]; then
                                echo "The current directory is empty... it does not contain any unorganized files."
                                exit 1
                        fi
                        if hostnamectl | grep -i "linux" ; then
                                for f in *.*; do d="${f##*.}"; mkdir -p "$d" && mv "$f" "$d"; done
                        else
                                echo "This script is intended to run on a Linux system."
                                exit 1
                        fi
                ;;
                1 | 255) # No
                        echo "Operation canceled."
                        exit 1
                ;;
        esac
else
        echo "This script will organize all files in the current directory by extension."
        echo "Yes or No?"
        read -p "Yes or No? " -n 1 -r

        if [[ $REPLY =~ ^[Yy]$ ]]; then
                if [[ -z "$(ls -A)" ]]; then
                        echo "The current directory is empty... it does not contain any unorganized files."
                        exit 1
                fi
                # Ensure that we are running on a Linux system. We cannot guarantee that this script will work on other systems.
                if hostnamectl | grep -i "linux" ; then
                        for f in *.*; do d="${f##*.}"; mkdir -p "$d" && mv "$f" "$d"; done
                else
                        echo "This script is intended to run on a Linux system."
                        exit 1
                fi
        else
                echo
                exit 1
        fi
fi

exit 0