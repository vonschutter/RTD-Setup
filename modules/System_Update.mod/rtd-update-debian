#!/bin/bash
PUBLICATION="RuntimeData Update Manager for Ubuntu"
VERSION="1.13"
#
#	RTD Ubuntu + derivatives software update script
#
#
# This system configuration and installation script was originally developed
# for RuntimeData, a small OEM in Buffalo Center, IA. The purpose of the script
# was to install and configure Ubuntu and Zorin OS PC's. This OEM and store nolonger
# exists as its owner has passed away. This script is shared in the hopes that
# someone will find it usefull.
#
# The purpose of this script is to update installed software from distribution reopositories.
#
###########################################################################
##                                                                       ##
##                       Set Environment                                 ##
##                                                                       ##
###########################################################################
# Test comment...
# Set colors for prompting on screen.
	YELLOW="\033[1;33m"
	RED="\033[1;31m"
	ENDCOLOR="\033[0m"
	GREEN="\033[1;32m"
	BLUE="\033[1;34m"
	
# Ensure administrative privileges.
[ "$UID" -eq 0 ] && echo -e "Administrative Access OK" $ENDCOLOR || echo -e $YELLOW"This script needs administrative access..." $ENDCOLOR 
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Identify 
# clear	
echo -e $GREEN"$PUBLICATION: Version $VERSION" $ENDCOLOR
echo -e $GREEN"--------------------------------------------------------" $ENDCOLOR

echo This tool makes it simple to update software from all channels 
echo available on the system at once. It will update via the native
echo -e "package manager as well as newer formats like $YELLOW"snap"$ENDCOLOR and $YELLOW"flatpak"$ENDCOLOR..."
echo " " 
echo This update script supports the following instructions:
echo " "
echo -e " - $YELLOW"Default"$ENDCOLOR : Just running this script will update via all configured channels."	
echo -e " - $YELLOW"update"$ENDCOLOR :  Parameter "update" will update the updater to the latest version. "
echo -e " - $YELLOW"setup"$ENDCOLOR :   Parameter "setup" make sure that you are using all software channels "
echo -e "      "
echo " "

if [ "$1" == "update" ]; then 
       	INSTRUCTION=update_me
fi

if [ "$1" == "config" ]; then 
       	INSTRUCTION=config_me
fi

if [ "$1" == "setup" ]; then 
       	INSTRUCTION=setup_me
fi



# Enable RTD Functions...
echo "Checking for RTD Functions..."
FILE=/opt/rtd/scripts/_rtd_library
if [ -f $FILE ]; then
   echo -e $GREEN"RTD Functions are available: Loading them for use... " $ENDCOLOR
   source $FILE
else
   echo "Cannot find RTD Functions... Attempting to get them online... "
   wget -q --show-progress https://github.com/vonschutter/RTD-Build/raw/master/"${FILE##*/}" -P /opt/rtd/scripts
   if [ -f $FILE ]; then
   	echo -e $GREEN"RTD Functions are available: Loading them for use... " $ENDCOLOR
   	source $FILE
   else
   	echo -e $RED"RTD Functions could NOT be loaded; You must use the native options to install software... "$ENDCOLOR
   	exit 
   fi
fi





###########################################################################
##                                                                       ##
##                         Functions                                     ##
##                                                                       ##
###########################################################################
#

deb_software_task ()
{
	log_item "running deb_software_task with parameters $@"
        # make some decent display terminal graphics...
        PAD="--------------------------------------------------"
	LINE=$(printf "%s %s" "$@" "$PAD" | cut -c 1-${#PAD})
	echo -ne "--- Executing "$LINE"":""\ & $@ >>$0.log 2>&1 && printf "%b%-6s%b [ \xE2\x9C\x94 ] $GREEN OK!$ENDCOLOR   \n" ||printf "%b%-6s%b [ ! ] $RED FAILED $ENDCOLOR  \n"

}



log_item ()
{
DATE=$(date '+%d/%m/%Y %H:%M:%S');
echo "$DATE --- : $@" >> $0.log
}



update_me ()
{
	# Documentation: Paths and the such... 
	# "# arguments called with ---->  ${@}     "
	# "# \$1 ---------------------->  $1       "
	# "# \$2 ---------------------->  $2       "
	# "# path to me --------------->  ${0}     "
	# "# parent path -------------->  ${0%/*}  "
	# "# my name ------------------>  ${0##*/} "
        	rm $0.bak
		mv $0 $0.bak
                wget  --show-progress https://github.com/vonschutter/RTD-Build/raw/master/System_Update/${0##*/} -P ${0%/*} 
                chmod +x $0
}



config_me ()
{
 echo "::There is nothing to configure at this time!::"
}



setup_me ()
{
	check_dependencies flatpak
	flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	check_dependencies  snap
}

###########################################################################
##                                                                       ##
##                        Execute updates                                ##
##                                                                       ##
###########################################################################
#
#

# Execute the fist instruction passed to this script... 
if [ ! -z $INSTRUCTION ]; then
	log_item The instruction $INSTRUCTION was given... 
	$INSTRUCTION
	exit
else
	log_item No instructions passed to $0... Continuing with default behavior. 
fi

echo -e $YELLOW"Updating installed software..." $ENDCOLOR
# Updating software managed by distribution speciffic software manager...
# Unless the RTD Functions are loaded, then use that. 
	if [[ $RTDFUNCTOINS -eq 1 ]]; then
		deb_software_task system_update
	else
		
		deb_software_task apt-get update
		UPGRADABLE=$(LANG=C apt-get upgrade -s |grep -P '^\d+ upgraded'|cut -d" " -f1)
		if [ "$UPGRADABLE" -eq 0 ]; then
			echo "--- $UPGRADABLE packages that need updates; Skipping update task... " 
		else
			echo $UPGRADABLE packages that need updates 
			deb_software_task apt-get upgrade -y
			deb_software_task apt-get autoremove -y
			deb_software_task apt-get clean
		fi
	fi
# updating snaps if snap is present on the system... 
if hash snap 2>/dev/null; then
	  deb_software_task snap refresh
	else 
	  echo "--- snap software is not present on this system... skipping..."
	fi

# updating flatpacks if flatpack is present on system... 	
if hash flatpak 2>/dev/null; then
	  deb_software_task flatpak update --user --noninteractive -y
	  deb_software_task flatpak update --system --noninteractive -y
	else 
	  echo "--- flatpak software is not present on this system... skipping..."
	fi


###########################################################################
##                                                                       ##
##                          Versions                                     ##
##                                                                       ##
###########################################################################
#




#END
