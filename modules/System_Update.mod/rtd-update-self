#!/bin/bash
RTD_UPDATE_SELF_VERSION=1.0
#::
#::
#:: 					Update RTD admin tools Task Sequence

#::                                     A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Admin Tool //::::::::::::::::::::::::::::::::::::::::// Linux //::::::::
#:: Author(s):   	SLS, KLS, NB.  Buffalo Center, IA & Avarua, Cook Islands
#:: Version:	1.00
#::
#::
#:: Purpose: 	The purpose of the task sequence is to configure update the installed admin tools.
#::
#::
#::		This task sequence should be executed on a PC with the the RTD OEM installation or configuration
#::
#::
#::
#:: Background: This system configuration and installation script was created to facilitate geting the latest simple
#::             managment tools on to a computer already using the rtd tools.
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#
#
#	RTD admin scrips are placed in /opt/rtd/scripts. Optionally scripts may use the common
#	functions in _rtd_functions and _rtd_recipies.
#	  _rtd_functions -- contain usefull admin functions for scripts, such as "how to install software" on different systems.
#	  _rtd_recipies  -- contain software installation and configuration "recipies".
#	Scripts may also be stand-alone if there is a reason for this.



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Variables that govern the behavior or the script and location of files are
BRAND=RTD

# Ensure administrative privileges.
[ "$UID" -eq 0 ] || echo -e $YELLOW "This script needs administrative access..." $ENDCOLOR
[ "$UID" -eq 0 ] || exec sudo DISPLAY=$DISPLAY bash "$0" "$@"

# Put a convenient link to the logs where logs are normally found...
# capture the 3 first letters as org TLA (Three Letter Acronym)
export _SCRIPTNAME=$(basename $0)
export _TLA=${_SCRIPTNAME:0:3}
export _LOG_DIR=/var/log/${_TLA,,}
mkdir -p ${_LOG_DIR}

# Set the GIT profile name to be used if not set elsewhere:
export _GIT_PROFILE="${_GIT_PROFILE:-vonschutter}"

# Location of base administrative scripts and command-lets to get.
_git_src_url=https://github.com/${_GIT_PROFILE}/${_TLA^^}-Setup.git

# Determine log file names for this session
export _ERRLOGFILE=${_LOG_DIR}/$(date +%Y-%m-%d-%H-%M-%S-%s)-oem-setup-error.log
export _LOGFILE${_LOG_DIR}/$(date +%Y-%m-%d-%H-%M-%S-%s)-oem-setup.log
export _STATUSLOG=${_LOG_DIR}/$(date +%Y-%m-%d-%H-%M-%S-%s)-oem-setup-status.log

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


check_rtd_library ()
{
	_src_url=https://github.com/${_GIT_PROFILE}/RTD-Setup/raw/main/core/_rtd_library

	if source "$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library ; then
		# Library found in relative path...
		write_information "${FUNCNAME[0]} 1 Using:  $( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library
	elif source $(find /opt -name _rtd_library |grep -v bakup ) ; then
		# Library not found in relative path: search the typical location...
		write_information "${FUNCNAME[0]} 2 Using: $(find /opt -name _rtd_library |grep -v bakup )"
	elif wget ${_src_url} ; then
		# Critical failure: downloaded copy from github.com
		source ./_rtd_library
	else
		# Abot condition: No mitigation steps worked.
		echo -e "RTD functions NOT loaded!"
		echo -e " "
		echo -e "Cannot ensure that the correct functionality is available"
		echo -e "Quiting rather than cause potential damage..."
		exit 1
	fi

	write_host -cyan "Libraries loaded"
	write_status "Paths registered:
	- Root directory of tools: 		_OEM_DIR="${scriptdir%/*}"
	- Caching and download folder: 	_CACHE_DIR="${_OEM_DIR}/cache"
	- Location of oem wallpapers: 	_WALLPAPER_DIR="${_OEM_DIR}/wallpaper"
	- Location of custom sounds:		_CUSTOMSOUND_DIR="${_OEM_DIR}/sound"
	- Location of installable themes: 	_THEME_DIR="${_OEM_DIR}/themes"
	- Location of 3rd party apps:		_APP_DIR="${_OEM_DIR}/apps"
	- Location of extension modules:	_MODS_DIR="${_OEM_DIR}/modules"
	- Root tools folder: 			_CORE_DIR="${_OEM_DIR}/core"
	- Location of log files:		_LOG_DIR=/var/log/${_TLA,,}
	"
}

task_setup_rtd_basics() {
	echo "Task: Attempting to get the latest RTD tools..."
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		echo "Linux OS Found: Attempting to get instructions for Linux..."
		echo executing $0 >> ${_LOGFILE}
		if ! hash git &>> ${_LOGFILE} ; then
			for i in apt yum dnf zypper ; do $i -y install git | tee ${_LOGFILE} ; done
		fi
		git clone --depth=1 ${_git_src_url} /opt/${_TLA,,}.tmp | tee ${_LOGFILE}
			if [ $? -eq 0 ]
			then
				echo "Instructions successfully retrieved..."
				if [[ -d /opt/${_TLA,,}  ]] ; then
					mv /opt/${_TLA,,} ${_BackupFolderName:="/opt/${_TLA,,}.$(date +%Y-%m-%d-%H-%M-%S-%s).bakup"}
					zip -m -r -5 ${_BackupFolderName}.zip  ${_BackupFolderName}
					rm -r ${_BackupFolderName}
				fi
				mv /opt/${_TLA,,}.tmp /opt/${_TLA,,} ; rm -rf /opt/${_TLA,,}/.git
				source /opt/${_TLA,,}/core/_rtd_library
				oem_register_all_tools
				ln -s -f ${_LOG_DIR} -T ${_OEM_DIR}/log
			else
				echo "Failed to retrieve instructions correctly! "
				echo "Suggestion: check write permission in "/opt" or internet connectivity."
				exit 1
			fi
		return $?
	elif [[ "$OSTYPE" == "darwin"* ]]; then
		echo "Mac OSX is currently not supported..."
	elif [[ "$OSTYPE" == "cygwin" ]]; then
		echo "CYGWIN is currently unsupported..."
	elif [[ "$OSTYPE" == "msys" ]]; then
		echo "Lightweight shell is currently unsupported... "
	elif [[ "$OSTYPE" == "freebsd"* ]]; then
		echo "Free BSD is currently unsupported... "
	else
	echo "This system is Unknown to this script"
	fi
	return
}




rtd_wait_for_internet_availability () {
	echo "Waiting for internet access..."
	echo "NOTE: Free access to the internet is required to continue."
	while ! ping -c 1 -W 1 8.8.8.8 &>/dev/null ; do
		echo Waiting...
		sleep 5
	done
}



do_update ()
{
	rtd_wait_for_internet_availability
	task_setup_rtd_basics && dialog --backtitle "$( basename $0 )" --title "${BRAND} tools updater: DONE!" --msgbox "\nUpdating the ${BRAND} tools done!. \n\n Press OK to confirm." 20 80 ; clear|| dialog --backtitle "$( basename $0 )" --title "${BRAND} tools updater: ERROR!" --msgbox "\nUpdating the ${BRAND} \Z1 FAILED!. \n\n Press OK to confirm." 20 80 ; clear
	rtd_oem_make_launchers
}


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Execute tasks                   ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Using the common function library to elevate priviledges... This is only useful
# is the script is not run via sudo to begin with...
check_rtd_library
ensure_admin

if hash dialog ; then
	if ( dialog --backtitle "$( basename $0 )" --title "${BRAND} tools updater: NOTICE!" --yesno "\nMay I update the ${BRAND} OEM tools on your system now? Updating the ${BRAND} tools will ensure that the latest functionality and bug fixes are applied. \n\n Press OK to continue or NO to skip doing this." 20 80 ) ; then
		clear && do_update
	else
		clear && exit
	fi
else
	echo -e $YELLOW
	echo "RTD Tools Updater Version $RTD_UPDATE_SELF_VERSION"
	echo "Hello $SUDO_USER ... I am going to update the rtd tools on this"
	echo " "
	echo "To cancel this, just close the terminal or press "CRTL C"."
	echo " "
	read -p "Press [ ENTER ] to continue with update"
	echo -e $ENDCOLOR
	do_update
fi



