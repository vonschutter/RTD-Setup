#!/bin/bash
#::                                      A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Compression Tool //::::::::::::::::::::::::::::::::::// Linux //::::::::
#::
#:: 	Author:   	SLS
:	${PUBLICATION:="RuntimeData Update Manager for Linux"}
:	${VERSION:="1.13"}
:	${GIT_Profile:=vonschutter}
#::
#::
#::	Purpose: The purpose of this script is to update installed software from distribution reopositories.
#::		 Software update script for SUSE, Debian, RedHat based systems...
#::
#::	Usage:	Simply execute this script to accomplish this task. No parameters required.
#::
#::	Change Log:
#::		- 2006.06.15: File originally created
#::		- 2015.10.15: Expanded to support multiple distros
#::		- 2018.05.10: Expanded to support Flatpak and Snaps
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Variables that govern the behavior or the script and location of files are

# Set colors for prompting on screen.
	YELLOW="\033[1;33m"
	RED="\033[1;31m"
	ENDCOLOR="\033[0m"
	GREEN="\033[1;32m"
	BLUE="\033[1;34m"
	
# Put a convenient link to the logs where logs are normally found...
# capture the 3 first letters as org TLA (Three Letter Acronym)
export _SCRIPTNAME=$(basename $0)
export _TLA=${_SCRIPTNAME:0:3}
export _LOG_DIR=/var/log/${_TLA}
mkdir -p ${_LOG_DIR}

# Determine log file names for this session
export LOGFILE=${_LOG_DIR}/${_SCRIPTNAME}.log

# Identify

echo -e $GREEN"$PUBLICATION: Version $VERSION" $ENDCOLOR
echo -e $GREEN"--------------------------------------------------------" $ENDCOLOR

echo This tool makes it simple to update software from all channels
echo available on the system at once. It will update via the native
echo -e "package manager as well as newer formats like $YELLOW"snap"$ENDCOLOR and $YELLOW"flatpak"$ENDCOLOR..."
echo " "
echo " "

if [ "$1" == "update" ]; then
       	INSTRUCTION=update_me
fi

if [ "$1" == "config" ]; then
       	INSTRUCTION=config_me
fi

if [ "$1" == "setup" ]; then
       	INSTRUCTION=setup_me
fi




#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

check_rtd_library ()
{
	_src_url=https://github.com/${_GIT_PROFILE}/RTD-Setup/raw/main/core/_rtd_library

	if source "$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library ; then
		# Library found in relative path...
		write_information "${FUNCNAME[0]} 1 Using:  $( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library
	elif source $(find /opt -name _rtd_library |grep -v bakup ) ; then
		# Library not found in relative path: search the typical location...
		write_information "${FUNCNAME[0]} 2 Using: $(find /opt -name _rtd_library |grep -v bakup )"
	elif wget "${_src_url}" ; then
		# Critical failure: downloaded copy from github.com
		source ./_rtd_library
	else
		# Abot condition: No mitigation steps worked.
		echo -e "RTD functions NOT loaded!"
		echo -e " "
		echo -e "Cannot ensure that the correct functionality is available"
		echo -e "Quiting rather than cause potential damage..."
		exit 1
	fi

	write_host --cyan "Libraries loaded"
	write_status "Paths registered:
	- Root directory of tools: 		_OEM_DIR="${scriptdir%/*}"
	- Caching and download folder: 		_CACHE_DIR="${_OEM_DIR}/cache"
	- Location of 3rd party apps:		_APP_DIR="${_OEM_DIR}/apps"
	- Location of extension modules:	_MODS_DIR="${_OEM_DIR}/modules"
	- Root tools folder: 			_CORE_DIR="${_OEM_DIR}/core"
	- Location of log files:		_LOG_DIR=/var/log/${_TLA,,}
	"
}



script::help ()
{
	echo -e "
	This tool makes it simple to update software from all channels
	available on the system at once. It will update via the native
	package manager as well as newer formats like snap and flatpak...

	This update script supports the following instructions:

	- $YELLOW"Default"$ENDCOLOR : Just running this script will update via all configured channels.
	- $YELLOW"update"$ENDCOLOR: Parameter 'update' will update the updater to the latest version.
	- $YELLOW"setup"$ENDCOLOR: Parameter 'setup' makes sure that you are using all software channels.

	Usage: rtd-oem-update-system [instruction]

	Instructions:
	- $YELLOW"update"$ENDCOLOR : Update the updater to the latest version.
	- $YELLOW"config"$ENDCOLOR : Configure the script (no configuration available at the moment).
	- $YELLOW"setup"$ENDCOLOR : Make sure that you are using all software channels.

	Options:
	--$YELLOW"help"$ENDCOLOR : Display this help text.
	--$YELLOW"noui"$ENDCOLOR : Update the system without displaying the user interface.

	Example usage:
	- Update the updater: $YELLOW"rtd-oem-update-system update"$ENDCOLOR
	- Configure the script: $YELLOW"rtd-oem-update-system config"$ENDCOLOR
	- Update the system without UI: $YELLOW"rtd-oem-update-system --noui"$ENDCOLOR
	"
}


log_item ()
{
DATE=$(date '+%d/%m/%Y %H:%M:%S');
echo "$DATE --- : $*" >> "${LOGFILE}"
}



update_me ()
{
	if [[ -w $0 ]] ; then
		rm $0.bak
		mv $0 $0.bak
		wget  --show-progress https://github.com/vonschutter/RTD-Setup/raw/main/modules/System_Update.mod/${0##*/} -P $0
		chmod +x $0
		if [[ -e $0 ]]; then
			return  0
		else
			cp $0.bak $0
			echo "Update failed: rolled back!"
			return 1
		fi
	fi
}



config_me ()
{
	write_error "::There is nothing to configure at this time!::"
}



setup_me ()
{
	check_dependencies flatpak
	flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	check_dependencies  snapd
}


become_root ()
{
	if [[ $EUID -ne 0 ]]; then
		# Ensure administrative privileges.
		echo -e $YELLOW"This script needs administrative access..." $ENDCOLOR
		exec sudo -E SUDO_USER=$USER /bin/bash "${0}" "$*" || rtd_oem_pause 1
	else
		# We are root, so no need to become root.
		echo -e $GREEN"Administrative access granted..." $ENDCOLOR
		echo -e " "
	fi
}

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Executive                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



# Execute the fist instruction passed to this script...
if [ ! -z $INSTRUCTION ]; then
	become_root "$1"
	log_item The instruction $INSTRUCTION was given...
	check_rtd_library
	$INSTRUCTION
	exit
else
	if [[ ! -z "$1" ]]; then
		echo "Request: $1"
	fi
	
fi



# Updating software managed by distribution speciffic software manager...
# Unless help was requested. 
if [[ "$1" == "--help" ]] ; then
	script::help
elif [[ "$1" == "--noui" ]] ; then
	echo  "${LOGFILE}"
	become_root "$1" 	|| rtd_oem_pause 1 "$0: $* Failed to elevate privileges!"
	check_rtd_library 	|| rtd_oem_pause 1 "$0: $* Failed to load RTD Library!"
	write_status "Updating installed software text display only..."
	write_status  "${LOGFILE}"
	software::update_system_txt "${LOGFILE}"
else 
	become_root "$1" 	|| rtd_oem_pause 1 "$0: $* Failed to elevate privileges!"
	check_rtd_library	|| rtd_oem_pause 1 "$0: $* Failed to load RTD Library!"
	write_status "Updating installed software..."
	software::update_all_ui  "${LOGFILE}"
fi