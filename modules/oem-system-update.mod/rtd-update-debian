#!/bin/bash
#::                                      A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Compression Tool //::::::::::::::::::::::::::::::::::// Debian //::::::::
#::
#:: 	Author:   	SLS
:	${PUBLICATION:="RuntimeData Update Manager for Ubuntu"}
:	${VERSION:="1.13"}
:	${GIT_Profile:=vonschutter}
#::
#::
#::	Purpose: The purpose of this script is to update installed software from distribution reopositories.
#::		 RTD Ubuntu + derivatives software update script
#::
#::	Usage:	Simply execute this script to accomplish this task. No parameters required.
#::
#::	Change Log:
#::		- 2006.06.15: File originally created
#::		- 2018.05.10: Expanded to support Flatpak and Snaps
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
# This script is shared in the hopes that someone will find it useful.
# For convenience and supportability most actions (work) is stored in a common library used bu multiple scripts.
# To use these functions in the library, simply load the library using the "source" bash built in command. All
# functions will then be available for use. This script demonstrates the simplicity of using these functions.
#
# This script is intended to live in the ~/bin/ or /bin/ folder, alternatively in the $PATH.
# By default this script is placed in /opt/
#
# 1 - To see options to use the rtd library type: "bash _rtd_library --help"
# 2 - To see usefull documentation on each function in this library: "bash _rtd_library --devhelp"
#
#
#


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Variables that govern the behavior or the script and location of files are
# Test comment...
# Set colors for prompting on screen.
	YELLOW="\033[1;33m"
	RED="\033[1;31m"
	ENDCOLOR="\033[0m"
	GREEN="\033[1;32m"
	BLUE="\033[1;34m"

# Ensure administrative privileges.
[ "$UID" -eq 0 ] && echo -e "Administrative Access OK" $ENDCOLOR || echo -e $YELLOW"This script needs administrative access..." $ENDCOLOR
[ "$UID" -eq 0 ] || exec sudo bash "$0" "$@"

# Identify
# clear
echo -e $GREEN"$PUBLICATION: Version $VERSION" $ENDCOLOR
echo -e $GREEN"--------------------------------------------------------" $ENDCOLOR

echo This tool makes it simple to update software from all channels
echo available on the system at once. It will update via the native
echo -e "package manager as well as newer formats like $YELLOW"snap"$ENDCOLOR and $YELLOW"flatpak"$ENDCOLOR..."
echo " "
echo This update script supports the following instructions:
echo " "
echo -e " - $YELLOW"Default"$ENDCOLOR : Just running this script will update via all configured channels."
echo -e " - $YELLOW"update"$ENDCOLOR :  Parameter "update" will update the updater to the latest version. "
echo -e " - $YELLOW"setup"$ENDCOLOR :   Parameter "setup" make sure that you are using all software channels "
echo -e "      "
echo " "

if [ "$1" == "update" ]; then
       	INSTRUCTION=update_me
fi

if [ "$1" == "config" ]; then
       	INSTRUCTION=config_me
fi

if [ "$1" == "setup" ]; then
       	INSTRUCTION=setup_me
fi



# Enable RTD Functions...
	_src_url=https://github.com/${_GIT_PROFILE}/RTD-Setup/raw/main/core/_rtd_library

	if source "$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library ; then
		# Library found in relative path...
		write_information "${FUNCNAME[0]} 1 Using:  $( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/../../core/_rtd_library
	elif source $(find /opt -name _rtd_library |grep -v bakup ) ; then
		# Library not found in relative path: search the typical location...
		write_information "${FUNCNAME[0]} 2 Using: $(find /opt -name _rtd_library |grep -v bakup )"
	elif wget ${_src_url} ; then
		# Critical failure: downloaded copy from github.com
		source ./_rtd_library
	else
		# Abot condition: No mitigation steps worked.
		echo -e "RTD functions NOT loaded!"
		echo -e " "
		echo -e "Cannot ensure that the correct functionality is available"
		echo -e "Quiting rather than cause potential damage..."
		exit 1
	fi

	write_host --cyan "Libraries loaded"
	write_status "Paths registered:
	- Root directory of tools: 		_OEM_DIR="${scriptdir%/*}"
	- Caching and download folder: 		_CACHE_DIR="${_OEM_DIR}/cache"
	- Location of 3rd party apps:		_APP_DIR="${_OEM_DIR}/apps"
	- Location of extension modules:	_MODS_DIR="${_OEM_DIR}/modules"
	- Root tools folder: 			_CORE_DIR="${_OEM_DIR}/core"
	- Location of log files:		_LOG_DIR=/var/log/${_TLA,,}
	"






###########################################################################
##                                                                       ##
##                         Functions                                     ##
##                                                                       ##
###########################################################################
#

deb_software_task ()
{
	log_item "running deb_software_task with parameters $@"
        # make some decent display terminal graphics...
        PAD="--------------------------------------------------"
	LINE=$(printf "%s %s" "$@" "$PAD" | cut -c 1-${#PAD})
	echo -ne "--- Executing "$LINE"":""\ & $@ >>$0.log 2>&1 && printf "%b%-6s%b [ \xE2\x9C\x94 ] $GREEN OK!$ENDCOLOR   \n" ||printf "%b%-6s%b [ ! ] $RED FAILED $ENDCOLOR  \n"

}



log_item ()
{
DATE=$(date '+%d/%m/%Y %H:%M:%S');
echo "$DATE --- : $@" >> $0.log
}



update_me ()
{
	# Documentation: Paths and the such...
	# "# arguments called with ---->  ${@}     "
	# "# \$1 ---------------------->  $1       "
	# "# \$2 ---------------------->  $2       "
	# "# path to me --------------->  ${0}     "
	# "# parent path -------------->  ${0%/*}  "
	# "# my name ------------------>  ${0##*/} "
        	rm $0.bak
		mv $0 $0.bak
                wget  --show-progress https://github.com/vonschutter/RTD-Setup/raw/master/system_update/${0##*/} -P ${0%/*}
                chmod +x $0
}



config_me ()
{
 echo "::There is nothing to configure at this time!::"
}



setup_me ()
{
	check_dependencies flatpak
	flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
	check_dependencies  snap
}

###########################################################################
##                                                                       ##
##                        Execute updates                                ##
##                                                                       ##
###########################################################################
#
#

# Execute the fist instruction passed to this script...
if [ ! -z $INSTRUCTION ]; then
	log_item The instruction $INSTRUCTION was given...
	$INSTRUCTION
	exit
else
	log_item No instructions passed to $0... Continuing with default behavior.
fi

echo -e $YELLOW"Updating installed software..." $ENDCOLOR
# Updating software managed by distribution speciffic software manager...
# Unless the RTD Functions are loaded, then use that.
	if [[ $RTDFUNCTOINS -eq 1 ]]; then
		deb_software_task system_update
	else

		deb_software_task apt-get update
		UPGRADABLE=$(LANG=C apt-get upgrade -s |grep -P '^\d+ upgraded'|cut -d" " -f1)
		if [ "$UPGRADABLE" -eq 0 ]; then
			echo "--- $UPGRADABLE packages that need updates; Skipping update task... "
		else
			echo $UPGRADABLE packages that need updates
			deb_software_task apt-get upgrade -y
			deb_software_task apt-get autoremove -y
			deb_software_task apt-get clean
		fi
	fi
# updating snaps if snap is present on the system...
if hash snap 2>/dev/null; then
	  deb_software_task snap refresh
	else
	  echo "--- snap software is not present on this system... skipping..."
	fi

# updating flatpacks if flatpack is present on system...
if hash flatpak 2>/dev/null; then
	  deb_software_task flatpak update --user --noninteractive -y
	  deb_software_task flatpak update --system --noninteractive -y
	else
	  echo "--- flatpak software is not present on this system... skipping..."
	fi


###########################################################################
##                                                                       ##
##                          Versions                                     ##
##                                                                       ##
###########################################################################
#




#END
