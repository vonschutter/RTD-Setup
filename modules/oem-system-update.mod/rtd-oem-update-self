#!/bin/bash
VERSION=1.01
PUBLICATION="$(basename "$0") | OEM Power Tools Updater          Version: ${VERSION}    $(hostnamectl |grep Operating) on $(hostnamectl |grep "Hardware Model")"
GIT_Profile=${GIT_Profile:-vonschutter}
#::
#::
#:: 					Update RTD admin tools Task Sequence
#::
#::                                     A D M I N   C O M M A N D
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::// Simple Admin Tool //::::::::::::::::::::::::::::::::::::::::// Linux //::::::::
#:: Author(s):   	SLS, KLS, NB.  Buffalo Center, IA & Avarua, Cook Islands
#:: Version:	1.00
#::
#::
#:: Purpose: 	The purpose of the task sequence is to configure update the installed admin tools.
#::
#::
#::		This task sequence should be executed on a PC with the the RTD OEM installation or configuration
#::
#::
#::
#:: Background: This system configuration and installation script was created to facilitate geting the latest simple
#::             managment tools on to a computer already using the rtd tools.
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#
#
#	RTD admin scrips are placed in /opt/rtd/scripts. Optionally scripts may use the common
#	functions in _rtd_functions and _rtd_recipies.
#	  _rtd_functions -- contain usefull admin functions for scripts, such as "how to install software" on different systems.
#	  _rtd_recipies  -- contain software installation and configuration "recipies".
#	Scripts may also be stand-alone if there is a reason for this.



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Put a convenient link to the logs where logs are normally found...
# capture the 3 first letters as org TLA (Three Letter Acronym)
export _scriptname=$(basename $0)
export _tla=${_scriptname:0:3}
export _log_dir=/var/log/${_tla,,}
mkdir -p ${_log_dir}
autoconfirm=${1}
export _theme_dir="/opt/${_tla,,}/themes"


# Set the GIT profile name to be used if not set elsewhere:
export _git_profile="${_GIT_PROFILE:-vonschutter}"

# Location of base administrative scripts and command-lets to get.
export _git_src_url="https://github.com/${_git_profile}/${_tla^^}-Setup.git"
export _git_theme_url="https://github.com/${_git_profile}/RTD-Themes.git"

# Determine log file names for this session
export _logfile="${_log_dir}/$(date +%Y-%m-%d-%H-%M)-${_scriptname}.log"

# List spciffic commands of software that are needed
export _software_dependencies="zip dialog pkexec"

# Decide where to put the backed up old versions of the tools... 
export _bakup_dir=/opt/backup
mkdir -p ${_bakup_dir}

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

dependency::file ()
{
	local _src_url="https://github.com/${_git_profile}/RTD-Setup/raw/main/core/${1}"
	local _tgt="${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Requested dependency file: ${1} ..."

		for i in "./${1}" "../core/${1}" \
		"../../core/${1}" \
		"${0%/*}/../core/${1}" \
		"${0%/*}/../../core/${1}" \
		"$(find /opt -name ${1} |grep -v bakup )" ; do
			echo "${FUNCNAME[0]}: Searching for ${i} ..."
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}"
				source "${i}" ""
				return 0
			fi
		done
		return 1
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		echo "$(date) failure to find $1 on the local comuter, now searching online..."
		if curl -sL $_src_url | source /dev/stdin ; then 
			echo "${FUNCNAME[0]} Using: ${_src_url} directly from URL..."
		elif wget ${_src_url} &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url} downloaded..."
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 
}



system::perform_powertools_update_linux ()
{
	cmd=(dialog --backtitle "${PUBLICATION}" --title "${_tla^^} PowerTools Updater" --separate-output --checklist "Please select what to include in the update below:" 22 85 16 )
	options=(1 "Update Base RTD Powertools" on
		2 "Update menu shortcuts" on
		3 "Update Themes (wallpapers, icons, themes, fonts etc.)" $( if [[ -e "${_theme_dir}" ]]; then echo on ; else echo off ; fi )
		)

		choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
		exit_status=$?
		export choices
		case $exit_status in
			1) clear && _pressed=Cancel && return ;;
			255) clear && _pressed=ESC && return ;;
		esac

		clear
		for choice in $choices
			do
			case $choice in
				1)
					write_information "Attempting to get the latest RTD tools..."
					hash git &>> ${_logfile} || check_dependencies git
				
					if git clone --depth=1 "${_git_src_url}" "/opt/${_tla,,}.tmp" ; then
						write_information "Powertools successfully retrieved..."
						if [[ -d /opt/${_tla,,}  ]] ; then
							mv "/opt/${_tla,,}" "${_BackupFolderName:="${_bakup_dir}/${_tla,,}-$(date +%Y-%m-%d-%H-%M).bakup"}"
							write_warning "Backing up old (/opt/${_tla,,}) to ${_BackupFolderName}.zip..." 
							zip -m -r -5 -q "${_BackupFolderName}.zip"  "${_BackupFolderName}"
							rm -r "${_BackupFolderName}"
						fi

						mv "/opt/${_tla,,}.tmp" "/opt/${_tla,,}" ; rm -rf /opt/${_tla,,}/.git
						source "/opt/${_tla,,}/core/_rtd_library"
						oem::register_all_tools
						ln -s "${_log_dir}" "${_OEM_DIR}/log"
						oem::rtd_tools_make_launchers
					else
						echo "Failed to retrieve power tools correctly! "
						echo "Suggestion: check write permission in "/opt" or internet connectivity."
						exit 1
					fi
				;;
				2)  
					write_information "Creating menu launchers..."
					oem::rtd_tools_make_launchers				
				;;
				3)
					write_information "Updating themes in ${_theme_dir}..."
					[[ -e "${_theme_dir}" ]] && zip -m -r -5 -q ${_bakup_dir}/themes-$(date +%Y-%m-%d-%H-%M-%S-%s).bakup.zip "${_theme_dir}" ; rm -r "${_theme_dir}"
					mkdir -p "${_theme_dir}"
					

					if git clone --depth=1 "${_git_theme_url}" "${_theme_dir}" ; then
						write_information "done!"
					else
						_err_cmd=" git clone --depth=1 ${_git_theme_url} ${_theme_dir}"
						dialog --backtitle "${PUBLICATION}" --title "${BRAND} tools updater: ERROR!" --msgbox "\ncommand: \n $_err_cmd ." 20 80 ; clear
					fi
				;;
			esac
		done	
}


task_setup_rtd_basics() {
	write_information "Task: Attempting to get the latest RTD tools..."
	if [[ "${OSTYPE:0:5}" == "linux" ]]; then
		write_information "Detected Linux OS..."
		system::perform_powertools_update_linux
	elif [[ "$OSTYPE" == "darwin"* ]]; then
		echo "Mac OSX is currently not supported..."
	elif [[ "$OSTYPE" == "cygwin" ]]; then
		echo "CYGWIN is currently unsupported..."
	elif [[ "$OSTYPE" == "msys" ]]; then
		echo "Lightweight shell is currently unsupported... "
	elif [[ "$OSTYPE" == "freebsd"* ]]; then
		echo "Free BSD is currently unsupported... "
	else
		echo "This system is Unknown to this script"
	fi
}




rtd_wait_for_internet_availability () {
	echo "Waiting for internet access..."
	echo "NOTE: Free access to the internet is required to continue."
	while ! ping -c 1 -W 1 8.8.8.8 &>/dev/null ; do
		echo Waiting...
		sleep 5
	done
}



do_update ()
{
	rtd_wait_for_internet_availability
	if task_setup_rtd_basics ; then
		if [[ ! --autoconfirm == ${autoconfirm} ]] ; then		
			if [[ "${_pressed}" == "Cancel" ]] ; then
				dialog --backtitle "${PUBLICATION}" --title "${_TLA} tools updater: CANCELED!" --msgbox "\nQuiting without updateign powertools. \n\n Press OK to confirm." 20 80 ; clear
			elif [[ "${_pressed}" == "ESC" ]] ; then
				echo "[ESC]"
			else
				dialog --backtitle "${PUBLICATION}" --title "${_TLA} tools updater: DONE!" --msgbox "\nUpdating the ${_TLA} tools done!. \n\n Press OK to confirm." 20 80 ; clear
			fi
		fi
		return 0
	else
		[[ --autoconfirm == ${autoconfirm} ]] || dialog --backtitle "${PUBLICATION}" --title "${_TLA} tools updater: ERROR!" --msgbox "\nUpdating the ${_TLA} FAILED!. \n\n Press OK to confirm." 20 80 ; clear
		return 1
	fi
}


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Execute tasks                   ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# Using the common function library to elevate priviledges... This is only useful
# is the script is not run via sudo to begin with...
dependency::file _rtd_library


if [[ ${UID} -eq 0 ]] ; then
	# Execute only in the case of elevated privileges:
	oem_launch_me () {
		echo "$(date) executing $0"
		for i in ${_software_dependencies} ; do hash "${i}" || check_dependencies ${i} ; done
		case ${autoconfirm} in
		--autoconfirm )
			clear && do_update
		;;
		* )
			if hash dialog ; then
				if ( dialog --backtitle "${PUBLICATION}" --title "${_TLA} tools updater: NOTICE!" --yesno "\nMay I update the ${_TLA} OEM tools on your system now? Updating the ${_TLA} tools will ensure that the latest functionality and bug fixes are applied. \n\n Press OK to continue or NO to skip doing this." 20 80 ) ; then
					clear && do_update
				else
					clear && exit
				fi
			else
				echo -e $YELLOW
				echo "RTD Tools Updater Version $RTD_UPDATE_SELF_VERSION"
				echo "Hello $SUDO_USER ... I am going to update the rtd tools on this"
				echo " "
				echo "To cancel this, just close the terminal or press "CRTL C"."
				echo " "
				read -p "Press [ ENTER ] to continue with update"
				echo -e $ENDCOLOR
				do_update
			fi
		;;
		esac
	}
	oem_launch_me | tee ${_logfile}
else
	# If privileges are not elevated; then request elevation using the appropriate method:
	_exec_local="$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" && pwd )"/"$( basename ${0} )"
	if echo $(systemctl get-default ) |grep graphical &>/dev/null ; then 
		if hash pkexec ; then 
			pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY ${_exec_local} ${autoconfirm}
		else
			security::ensure_admin
			exit
		fi
	else 
		security::ensure_admin ; fi
	exit
fi
