#!/bin/bash
VERSION="1.00"
PUBLICATION="${_TLA:-"$(basename $0)"} | OEM Application Launcher          Version: ${VERSION}             $(hostnamectl |grep "Machine ID")"

#
#::             Linux Theme Installer Script
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::// Linux //::::
#:: Author(s):   	SLS
#:: Version 1.00
#::
#::
#::	Purpose: The purpose of this script is to securely run OEM applications. OEM applications are some selected
#::		 applications used for OEM related system management and/or unique functionality.
#::
#::	Dependencies: - There may be dependencies like make and other development utilities.
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

_APPS_DIR="${_APPS_DIR:-"$(find /opt -name apps)"}"


#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



dependency::file ()
{
	local _src_url="https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/core/${1}"
	local _tgt="${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Requested dependency file: ${1} ..."

		for i in "./${1}" "../core/${1}" "../../core/${1}" "${0%/*}/../core/${1}" "${0%/*}/../../core/${1}" "$(find /opt -name "${1}" |grep -v bakup )" ; do 
			echo "${FUNCNAME[0]}: Searching for ${i} ..."
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}"
				source "${i}" ""
				return 0
			fi
		done
		return 1
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		echo "$(date) failure to find $1 on the local comuter, now searching online..."
		if curl -sL "$_src_url" | source /dev/stdin ; then 
			echo "${FUNCNAME[0]} Using: ${_src_url} directly from URL..."
		elif wget "${_src_url}" &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url} downloaded..."
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 
}



oem::refresh_apps ()
{
	[ "$UID" -eq 0 ] || { 
		write_warning "This script needs administrative access..." 
		exec sudo -E bash "$0" --refresh
		}
	
	for z in "${_APPS_DIR}"/*.7z ; do
		if [[ -e "${_APPS_DIR}/${z}.1" ]] ; then 
			rm "${_APPS_DIR}/${z}.1"
		fi
		wget --backups=1ref "https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/apps/${z##*/}" --directory-prefix="${_APPS_DIR}" || local _err=1
	done

	[[ $_err -eq 1 ]] && write_error "At least one problem occurred while transferring files..."
}





oem::run_payload ()
{
	if [[ -r "${_APPS_DIR}/${1}.7z" ]] ; then 
		if [[ "$(md5sum "${_APPS_DIR}/${1}.7z" |awk '{print $1;}')" == "$(cat "${_CORE_DIR}/sigs/${1}.sig" |awk '{print $1;}')" ]] ; then
			7z x "${_APPS_DIR}/${1}.7z" -aoa -o"${2}" &>/dev/null
			chmod +x "${2}"/"${1}"
			if file "${2}"/"${1}" | grep "Windows" ; then
				if hash wine ; then 
					wine "${2}"/"${1}" &>/dev/null
					return
				else
					dialog --backtitle "RTD Power Tools" \
					--title "Something Went Wrong" \
					--yes-label "Install Wine" \
					--no-label "Cancel" \
					--yesno "\nWINE is needed to run windows programs on Linux. However, WINE is not installed. \
					Please install WINE and try again. \n\n \
					I could try to install Wine for you if you wish? \
					$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )\
					Should I do that? " 20 80
					response=$?
					
					case $response in
						0) ensure_admin ; check_dependencies wine ;;
						1) return ;;
						255) echo "[ESC] key pressed.";;
					esac
				fi
			else
				"${2}"/"${1}" || rtd_oem_pause 1
			fi
			return
		else
			dialog --backtitle "RTD Power Tools" \
			--title "Failed to verify security of application!" \
			--msgbox "\nThe file does not seem to be the original that the OEM has provided. Please verify that the application is the original one. \n\n" 20 80
			return 1 
		fi
	else 
		echo "No such application present!"
	fi

	rm -rf "${2}" &>/dev/null
}

internal::chk_param_payload ()
{

	if [[ -z "${1}" ]] ; then 
		display::oem_program_list
	else
		if [[ -r "${_APPS_DIR}/${1}.7z" ]] ; then 
			write_information "Runnig OEM application ${1}"
			oem::run_payload "$1" "$( mktemp -d )"
			return
		else 
			case ${1} in 
				--help ) display::help ;;
				--refresh ) oem::refresh_apps ;;
				*) display::help ;;
			esac
			exit
		fi
	fi
}


display::help ()
{
	write_warning "	
	To use this application to start OEM apps please
	try the following:
	" 
	write_host --cyan "	${BASH_SOURCE[0]} application
	"

	write_information "	Installed OEM applications are: 
	------------------------------
$( for i in $(for file in "${_APPS_DIR}"/*.7z ; do echo "${file##*/}" ; done ); do write_host --red "	${i::-3}" ; done )
	"
	write_host --cyan "
	To use the menu of apps to start, please run ${BASH_SOURCE[0]} with no parameters at all.
	In case of problems, please use the --refresh option.

	Valid options are:
	<application name>	: To start an application cleanly
	--help			: To see this help
	--refresh		: To refresh cached OEM apps
	"

exit
}


display::oem_program_list ()
{
	while true; do
		exec 3>&1
			local n=1
			local _proglist
			_proglist="$(
				for i in $(for file in "${_APPS_DIR}"/*.7z ; do echo "${file##*/}" ; done );
				do 
					echo  "${i::-3}"
					((n=n+1)) 
				done
				)"
			_run=$(dialog --backtitle "${PUBLICATION}" --no-items --ok-label "Start" --cancel-label "EXIT" --menu "Please Choose an OEM Application to Start"  25 80 20 ${_proglist} 2>&1 1>&3 )
			exit_status=$?
			clear
		exec 3>&-

		case $exit_status in
			1) clear && echo [Cancel] && exit ;;
			255) clear && echo [ESC] && exit ;;
		esac

		case "$_run" in
			"$_run" )
				write_information "Runnig OEM application ${_run}"
				oem::run_payload "${_run}" "$( mktemp -d )"
				display::oem_program_list
			;;
			* ) exit ;;
		esac
	done
	
	
}

#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Logic and Flow Control          ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


dependency::file _rtd_library &>/dev/null
hash 7z &>/dev/null || check_dependencies p7zip
hash wine &>/dev/null || check_dependencies wine
hash md5sum &>/dev/null || (echo "I cannot start OEM apps without security validation software!" ; exit 1)
internal::chk_param_payload "${1}"
