#!/bin/bash
#
#::                                       A D M I N   T O O L
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::// RTD OEM bundle manager //::::::::::::::::::::::::::::::::::// Linux //::::::::
#:: Author(s):   	Vonschutter
#:: Version 1.00
#::
#::
#::	Purpose: - The purpose of the script is to setup extra apps/config that is useful for a complete and productive environment.
#::		 - Feature: this script "detects" how to install and update software and and tweak the system.
#::		 - Flexible: This script works on several distributions of Linux since it uses "RTD Functions". Of course, you could
#::		   simply list all the "apt", "yum", or "zypper" commands along with the "snap" and "flatpak" to install
#::		   the software needed. However, you would likely need separate scripts for each distribution AND you
#::		   could not select or de-select software bundles or speciffic titles. This uses a GUI with a timeout for that.
#::		 - Smart: The "recipies" also downloads setup files from vendors with no repositories, and that do not have "snaps".
#::		 - Resiliant: This RTD installation system is therefore resiliant, stable, and flexible.
#::
#::	Dependencies:
#::	  _rtd_functions -- contain usefull admin functions for scripts, such as "how to install software" on different systems.
#::	  _rtd_recipies  -- contain software installation and configuration "recipies".
#::
#::
#::
#::
#::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Settings                 ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Variables that govern the behavior or the script and location of files are
# set here. There should be no reason to change any of this.

# Decide where to put log files.
# Default: log in to the $_LOG_DIR location dated accordingly. If this is already set
# we use the requested location. These settings are calculated below but you may
# chose to over ride them by uncommenting the variables below:
#
# export _LOG_DIR=
# export _ERRLOGFILE=
# export _LOGFILE=
# export _TLA=



: ${_SCRIPTNAME=$(basename $0)}
: ${_TLA=${_SCRIPTNAME:0:3}}
: ${_GIT_PROFILE:=vonschutter}
if [[ $EUID -eq 0 ]] ; then
	_LOG_DIR="/var/log/${_TLA,,}"
else
	_LOG_DIR="${HOME}/.config/${_TLA,,}/log"
fi
: ${_LOGFILE:="${_LOG_DIR}/$(basename $0)-$(date +%Y-%m-%d).log"}




_ABOUT='
<span font="16" foreground="blue"><b>OEM Bundle Manager</b></span>

The OEM Bundle Manager is part of the RTD Power Tools, and makes is easy to add
and remove groups of packages. A group of packages are ususally grouped
around a capabillity or set of tasks, and could be considered roles.

For example, you may have a bundle called '3D_Printing' that will
install all applications needed to work with 3D Pringing objects.
These applications can be added or removed by simply checking a box.
A bundle can also be a collection of themes, or fonts, or a
set of configurations; not just a list of software and plugins.

<big><b>Overview</b></big>

The purpose of this tool is to facilitate the easy adding and removal of
extra apps/config and other items useful for a complete and productive desktop environment.
This is an ideal tool to use on a newly built system when you need to install a ton of stuff
to get a truly useful system. Then Bundle Manager lets you install software by task or role. 

- <b>Feature:</b> this tool detects how to install and update software and and tweak the system.
- <b>Flexible:</b> This tool works on several distributions of Linux since it uses RTD Functions.
  Of course, you could simply list all the apt, yum, or zypper commands along with the snap
  and flatpak commands to install the software needed. However, you would likely need separate scripts
  for each distribution AND you could not select or de-select software bundles or speciffic titles.
  The OEM Bundle Manager uses a simple GUI to select and make sure app, configurations,
  and other items are added.
- <b>Smart:</b> The "recipies" also downloads setup files from vendors with no repositories, and that do not have "contained apps".
- <b>Resiliant:</b> This RTD bundle manager is therefore resiliant, stable, and flexible since it is built to partially
  succeed tather than fail and installing dependencies when you need them.
'

_INFO_TXT="'
<span font='16' foreground='red'>Add or remove bundles on this system</span> \n
NOTE: The OEM Bundle Manager, depending on your choices, may download vendor 
packages, or containes applications such as snap apps, or flatpak apps, 
or even download software from a vendors web site, as well as install 
fonts and wallpapeers etc. \n '"



#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Script Functions                ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



dependency::file ()
{
	_src_url="https://github.com/${_GIT_PROFILE:-vonschutter}/RTD-Setup/raw/main/core/${1}"

	dependency::search_local ()
	{
		echo "${FUNCNAME[0]}: Searching for ${1} ..." 

		for i in "./${1}" "${0%/*}/../core/${1}" "${0%/*}/../../core/${1}" "../core/${1}" "../../core/${1}" "$(find /opt -name ${1} |grep -v bakup )" ; do 
			echo "${FUNCNAME[0]}: Searching for ${i} ..." 
			if [[ -e "${i}" ]] ; then 
				echo "${FUNCNAME[0]}: Found ${i}" 
				source "${i}" ""
				return 0
			fi
		done	
	}

	if dependency::search_local "${1}" ; then
		return 0
	else
		echo "$(date) failure to find $1 on the local comuter, now searching online..."
		if curl -sL $_src_url | source /dev/stdin ; then 
			echo "${FUNCNAME[0]} Using: ${_src_url} directly..."
		elif wget ${_src_url} &>/dev/null ; then
			source ./"${1}"
			echo "${FUNCNAME[0]} Using: ${_src_url} downloaded..."
		else 
			echo "${FUNCNAME[0]} Failed to find  ${1} "
			exit 1
		fi
	fi 

}
 

system::ExecStart () {
	[ "$UID" -eq 0 ] || security::ensure_admin
	[ -z "$RTD_INTERNET_IP" ] || system::wait_for_internet_availability

	# Allow super user to display gui menu on users screen.
	if [[ -f /etc/pam.d/sudo ]] ; then
		sed -i s/'# session  optional       pam_xauth.so'/'session  optional       pam_xauth.so'/g /etc/pam.d/sudo
	else
		write_warning "The file /etc/pam.d/sudo does not apear to exist. "
	fi

	if ! [ "$UID" -eq 0 ]; then
		write_error "This script needs administrative access..."
		return 1
	fi
	
	# Ensure that users chooice of GUI is available, if not, install it, and if not possible then use zenity
	if hash yad &>/dev/null ; then
		DisplayGUI="${DisplayGUI:-"yad"}"
		system::log_item "$(basename $0) using [yad] for GUI"
	elif hash zenity &>/dev/null ; then
		DisplayGUI="zenity"
		system::log_item "$(basename $0) using [zenity] for GUI"
	else
		write_error "Neither [yad] or [zenity] are available to display menus"
		if software::add_native_package "zenity" "yad" ; then
			system::log_item "$(basename $0) installed [yad] or [zenity] for GUI: Please re-run this script"
			if hash yad &>/dev/null ; then
				DisplayGUI="yad"
				system::log_item "$(basename $0) using [yad] for GUI"
			elif hash zenity &>/dev/null ; then
				DisplayGUI="zenity"
				system::log_item "$(basename $0) using [zenity] for GUI"
			else
				write_error "Failed to install [yad] or [zenity] for GUI"
				return 1
			fi
		else
			write_error "Failed to install [yad] or [zenity] for GUI"
			return 1
		fi
		
	fi

	if [[ $DisplayGUI == "zenity" ]]; then
		while true; do
			exec 3>&1
			selection=$(zenity --cancel-label=QUIT  --list \
				"Add Bundles to this computer" \
				"Remove Bundles from this computer" \
				"Information abount this tool" \
				--column="Select What you Want To Do:" --text="$_INFO_TXT" \
				--title="OEM Bundle Manager" --height=450 --width=640 )
			exit_status=$?
			exec 3>&-

			system::log_item "$(basename $0) user selected: $selection"

			case ${exit_status} in
				1) system::log_item "$(basename $0) was told to [QUIT]" & echo [QUIT] && exit 
				;;
				255) system::log_item "$(basename $0) user pressed [ESC]" & echo [ESC] && exit 
				;;
			esac

			case "$selection" in
				"Add Bundles to this computer" ) 
					software::display_bundle_install_choices_gtk --zenity 
				;;
				"Remove Bundles from this computer" ) 
					software::display_bundle_removal_choices_gtk --zenity 
				;;
				"Information abount this tool" ) 
					zenity::display_info "$_ABOUT"  
				;;
				* )
					return 1
					;;
			esac
		done
	else [[ $DisplayGUI == "yad" ]];
		while true; do
			exec 3>&1
			selection=$(yad --cancel-label=QUIT  --list \
				"Add Bundles to this computer" \
				"Remove Bundles from this computer" \
				"Information abount this tool" \
				--column="Select What you Want To Do:" --text="$_INFO_TXT" \
				--title="OEM Bundle Manager" --height=450 --width=640 )
			exit_status=$?
			exec 3>&-

			system::log_item "$(basename $0) user selected: $selection"

			case ${exit_status} in
				1) system::log_item "$(basename $0) was told to [QUIT]" & echo [QUIT] && exit 
				;;
				255) system::log_item "$(basename $0) user pressed [ESC]" & echo [ESC] && exit 
				;;
			esac

			case "$selection" in
				"Add Bundles to this computer|" ) 
					software::display_bundle_install_choices_gtk --yad 
				;;
				"Remove Bundles from this computer|" ) 
					software::display_bundle_removal_choices_gtk --yad 
				;;
				"Information abount this tool|" ) 
					zenity::display_info "$_ABOUT"  
				;;
				* )
				# Trap unknown exit code...
				return 1
				;;
			esac
		done
	fi
}



system::ExecStart::help ()
{
	clear
	_HELP_MSG='
	<span font="16" foreground="red">🔧    OEM Bundle Manager HELP     🔧</span>

	This is not yet written.

	Syntax (to be added):

	rtd-oem-bundle-manager [ --remove-menu | --install-menu | --help | --timeout="SECONDS" ]

	Where:
	<tt>
	--remove-menu .......... Display the "Remove Bundle" menu
	--install-menu ......... Display the "Install Bundle" menu
	--timeout="SECONDS" .... Set a timeout for the menu
	--about ................ Show information about this tool
	--help ................. Display this help message
	--more-help ............ Display online help
	</tt>

	If nothing is specified the main dialog will be shown.

	'
	zenity::display_info "$_HELP_MSG"
}




#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::          Execute tasks                   ::::::::::::::::::::::
#::::::::::::::                                          ::::::::::::::::::::::
#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

dependency::file "_rtd_library" || { echo "📚 Failed to find _rtd_library"; exit 1; }

main ()
{
	DisplayGUI="yad"
	run="yes"

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--display-gui )
			DisplayGUI="$2"
			system::log_item "GUI requested: ${DisplayGUI}"
			shift 2
			;;
		--timeout )
			# Set the timeout for the menu
			# This is not yet implemented
			timeout="$2"
			system::log_item "Timeout set to: ${timeout}"
			shift 2
			;;
		--help )
			system::log_item "Displaying help message" 
			system::ExecStart::help
			run="no" 
			shift
			;;
		--about )
			system::log_item "Displaying about message"
			case "$DisplayGUI" in
			"yad" )
				yad::display_info "$_ABOUT"
				;;
			"zenity" )
				zenity::display_info "$_ABOUT"
				;;
			esac
			run="no"
			shift
			;;
		--more-help ) 
			system::log_item "Displaying more help online"
			if [[ EUID -eq 0 ]] ; then
				system::log_item "Running as root, using sudo to open browser"
				sudo -H -u $SUDO_USER XDG_RUNTIME_DIR="/run/user/$(id -u $SUDO_USER)" xdg-open  "https://github.com/${_GIT_PROFILE}/RTD-Setup/blob/main/modules/oem-bundle-manager.mod/README.md" 
			else
				system::log_item "Running as user, using xdg-open to open browser"
				xdg-open  "https://github.com/${_GIT_PROFILE}/RTD-Setup/blob/main/modules/oem-bundle-manager.mod/README.md" 

			fi
			run="no"
			shift
			;;
		--rtd )
			system::log_item "Displaying RTD README"
			case "$DisplayGUI" in
			"yad" )
				yad::display_file "/opt/rtd/README.md" 
				;;
			"zenity" )
				zenity::display_file "/opt/rtd/README.md" 
				;;
			esac
			run="no"
			shift
			;;
		* )
			# If no options are specified, we will use the default GUI
			DisplayGUI="zenity"
			system::log_item "No GUI specified, using default: ${DisplayGUI}"
			shift
			;;
		esac
	done

	if [[ $run == "no" ]] ; then
		system::log_item "Exiting script"
		exit 0
	else
		system::log_item "Running script"
		system::log_item "Starting the OEM Bundle Manager"
		system::ExecStart 2>&1 | tee -a "${_LOGFILE}"
	fi
}
main "$@" 	 	